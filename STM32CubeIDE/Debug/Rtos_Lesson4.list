
Rtos_Lesson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007744  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b24  08007b24  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b2c  08007b2c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08007b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003380  200000e0  08007c14  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003460  08007c14  00023460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9a8  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404f  00000000  00000000  0003fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00043b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  000453c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293be  00000000  00000000  00046af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d70e  00000000  00000000  0006feae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001077ca  00000000  00000000  0008d5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d28  00000000  00000000  00194dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000e0 	.word	0x200000e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800790c 	.word	0x0800790c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000e4 	.word	0x200000e4
 800021c:	0800790c 	.word	0x0800790c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  return xTaskGetTickCount();
 80005e6:	f005 f9b3 	bl	8005950 <xTaskGetTickCount>
 80005ea:	4603      	mov	r3, r0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <vApplicationMallocFailedHook>:

/* USER CODE END 1 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL,
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_FREERTOS_Init+0x5c>)
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4815      	ldr	r0, [pc, #84]	; (8000660 <MX_FREERTOS_Init+0x60>)
 800060c:	f003 faee 	bl	8003bec <osTimerNew>
 8000610:	4603      	mov	r3, r0
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <MX_FREERTOS_Init+0x64>)
 8000614:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew(10, sizeof(uint16_t),
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <MX_FREERTOS_Init+0x68>)
 8000618:	2102      	movs	r1, #2
 800061a:	200a      	movs	r0, #10
 800061c:	f003 fb62 	bl	8003ce4 <osMessageQueueNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_FREERTOS_Init+0x6c>)
 8000624:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_FREERTOS_Init+0x70>)
 8000628:	2100      	movs	r1, #0
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_FREERTOS_Init+0x74>)
 800062c:	f003 f9fc 	bl	8003a28 <osThreadNew>
 8000630:	4603      	mov	r3, r0
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <MX_FREERTOS_Init+0x78>)
 8000634:	6013      	str	r3, [r2, #0]
      &defaultTask_attributes);

  /* creation of _vRecieverLD2 */
  _vRecieverLD2Handle = osThreadNew(vRecieverLD2_Func, NULL,
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <MX_FREERTOS_Init+0x7c>)
 8000638:	2100      	movs	r1, #0
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <MX_FREERTOS_Init+0x80>)
 800063c:	f003 f9f4 	bl	8003a28 <osThreadNew>
 8000640:	4603      	mov	r3, r0
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <MX_FREERTOS_Init+0x84>)
 8000644:	6013      	str	r3, [r2, #0]
      &_vRecieverLD2_attributes);

  /* creation of _vReceiverYELLOW */
  _vReceiverYELLOWHandle = osThreadNew(_vReceiverYELLOW_Func, NULL,
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <MX_FREERTOS_Init+0x88>)
 8000648:	2100      	movs	r1, #0
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <MX_FREERTOS_Init+0x8c>)
 800064c:	f003 f9ec 	bl	8003a28 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <MX_FREERTOS_Init+0x90>)
 8000654:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	08007a40 	.word	0x08007a40
 8000660:	08000745 	.word	0x08000745
 8000664:	20000110 	.word	0x20000110
 8000668:	08007a28 	.word	0x08007a28
 800066c:	2000010c 	.word	0x2000010c
 8000670:	080079bc 	.word	0x080079bc
 8000674:	08000695 	.word	0x08000695
 8000678:	20000100 	.word	0x20000100
 800067c:	080079e0 	.word	0x080079e0
 8000680:	080006fd 	.word	0x080006fd
 8000684:	20000104 	.word	0x20000104
 8000688:	08007a04 	.word	0x08007a04
 800068c:	08000721 	.word	0x08000721
 8000690:	20000108 	.word	0x20000108

08000694 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af02      	add	r7, sp, #8
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  if (xTimerChangePeriod(myTimer01Handle, 4000 / portTICK_PERIOD_MS,
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <StartDefaultTask+0x60>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80006aa:	2104      	movs	r1, #4
 80006ac:	f006 f87c 	bl	80067a8 <xTimerGenericCommand>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d119      	bne.n	80006ea <StartDefaultTask+0x56>
      0) == pdPASS) {
    xTimerStart(myTimer01Handle, 0);
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <StartDefaultTask+0x60>)
 80006b8:	681c      	ldr	r4, [r3, #0]
 80006ba:	f005 f949 	bl	8005950 <xTaskGetTickCount>
 80006be:	4602      	mov	r2, r0
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	4620      	mov	r0, r4
 80006ca:	f006 f86d 	bl	80067a8 <xTimerGenericCommand>
    vPrintStringAndNumber(xTaskGetTickCount() / configTICK_RATE_HZ);
 80006ce:	f005 f93f 	bl	8005950 <xTaskGetTickCount>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <StartDefaultTask+0x64>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	099b      	lsrs	r3, r3, #6
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f983 	bl	80009e8 <vPrintStringAndNumber>
    for (;;) {

      osDelay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f003 fa52 	bl	8003b8c <osDelay>
 80006e8:	e7fb      	b.n	80006e2 <StartDefaultTask+0x4e>
    }
  }
  //osThreadYield();
  /* USER CODE END StartDefaultTask */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000110 	.word	0x20000110
 80006f8:	10624dd3 	.word	0x10624dd3

080006fc <vRecieverLD2_Func>:
 * @brief Function implementing the _vRecieverLD2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vRecieverLD2_Func */
void vRecieverLD2_Func(void *argument) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vRecieverLD2_Func */
  /* Infinite loop */
  for (;;) {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000704:	2120      	movs	r1, #32
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fe23 	bl	8001354 <HAL_GPIO_TogglePin>
    osDelay(Led.LD2_Period);
 800070e:	4b03      	ldr	r3, [pc, #12]	; (800071c <vRecieverLD2_Func+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fa3a 	bl	8003b8c <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000718:	e7f4      	b.n	8000704 <vRecieverLD2_Func+0x8>
 800071a:	bf00      	nop
 800071c:	20000000 	.word	0x20000000

08000720 <_vReceiverYELLOW_Func>:
 * @brief Function implementing the _vReceiverYELLO thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header__vReceiverYELLOW_Func */
void _vReceiverYELLOW_Func(void *argument) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _vReceiverYELLOW_Func */
  /* Infinite loop */
  for (;;) {
    HAL_GPIO_TogglePin(Yellow_GPIO_Port, Yellow_Pin);
 8000728:	2120      	movs	r1, #32
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <_vReceiverYELLOW_Func+0x1c>)
 800072c:	f000 fe12 	bl	8001354 <HAL_GPIO_TogglePin>
    osDelay(Led.YELLOW_Period);
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <_vReceiverYELLOW_Func+0x20>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	f003 fa29 	bl	8003b8c <osDelay>
    HAL_GPIO_TogglePin(Yellow_GPIO_Port, Yellow_Pin);
 800073a:	e7f5      	b.n	8000728 <_vReceiverYELLOW_Func+0x8>
 800073c:	48000400 	.word	0x48000400
 8000740:	20000000 	.word	0x20000000

08000744 <Callback01>:
  }
  /* USER CODE END _vReceiverYELLOW_Func */
}

/* Callback01 function */
void Callback01(void *argument) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af02      	add	r7, sp, #8
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  Led.YELLOW_Period = 1000;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <Callback01+0x7c>)
 800074e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000752:	605a      	str	r2, [r3, #4]
  Led.LD2_Period = 50;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <Callback01+0x7c>)
 8000756:	2232      	movs	r2, #50	; 0x32
 8000758:	601a      	str	r2, [r3, #0]
  IWDG->KR = 0xAAAA;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <Callback01+0x80>)
 800075c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000760:	601a      	str	r2, [r3, #0]
  if (xTimerIsTimerActive(myTimer01Handle)) {
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <Callback01+0x84>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fb40 	bl	8006dec <xTimerIsTimerActive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d009      	beq.n	8000786 <Callback01+0x42>
    xTimerChangePeriodFromISR(myTimer01Handle, pdMS_TO_TICKS( 500 ),
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <Callback01+0x84>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <Callback01+0x88>)
 800077c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000780:	2109      	movs	r1, #9
 8000782:	f006 f811 	bl	80067a8 <xTimerGenericCommand>
        &xHigherPriorityTaskWoken);
  }
  vPrintStringAndNumber(xTimerGetPeriod(myTimer01Handle));
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <Callback01+0x84>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f006 f85a 	bl	8006844 <xTimerGetPeriod>
 8000790:	4603      	mov	r3, r0
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f928 	bl	80009e8 <vPrintStringAndNumber>
  char *statistic;
  statistic = pvPortMalloc(1024);
 8000798:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800079c:	f003 fb4a 	bl	8003e34 <pvPortMalloc>
 80007a0:	60f8      	str	r0, [r7, #12]
  if (statistic) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d007      	beq.n	80007b8 <Callback01+0x74>
    vTaskGetRunTimeStats(statistic);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f005 fe43 	bl	8006434 <vTaskGetRunTimeStats>
    // HAL_UART_Transmit(&huart3, (uint8_t*) statistic, strlen(statistic),
//    HAL_MAX_DELAY
//    );
    vPortFree(statistic);
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f003 fc10 	bl	8003fd4 <vPortFree>
    osThreadYield();
 80007b4:	f003 f9ca 	bl	8003b4c <osThreadYield>
  }

  /* USER CODE END Callback01 */
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	40003000 	.word	0x40003000
 80007c8:	20000110 	.word	0x20000110
 80007cc:	200000fc 	.word	0x200000fc

080007d0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_GPIO_Init+0x10c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a3c      	ldr	r2, [pc, #240]	; (80008dc <MX_GPIO_Init+0x10c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <MX_GPIO_Init+0x10c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a36      	ldr	r2, [pc, #216]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <MX_GPIO_Init+0x10c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0320 	and.w	r3, r3, #32
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a30      	ldr	r2, [pc, #192]	; (80008dc <MX_GPIO_Init+0x10c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a2a      	ldr	r2, [pc, #168]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0x10c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f000 fd69 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	4822      	ldr	r0, [pc, #136]	; (80008e0 <MX_GPIO_Init+0x110>)
 8000858:	f000 fd64 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	; (80008e4 <MX_GPIO_Init+0x114>)
 8000872:	f000 fbd5 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000886:	230c      	movs	r3, #12
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 fbc4 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000898:	2320      	movs	r3, #32
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f000 fbb5 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008b6:	2320      	movs	r3, #32
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0x110>)
 80008ce:	f000 fba7 	bl	8001020 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000400 	.word	0x48000400
 80008e4:	48000800 	.word	0x48000800

080008e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_IWDG_Init+0x34>)
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <MX_IWDG_Init+0x38>)
 80008f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_IWDG_Init+0x34>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_IWDG_Init+0x34>)
 80008fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008fe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2300;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_IWDG_Init+0x34>)
 8000902:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000906:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_IWDG_Init+0x34>)
 800090a:	f000 fd3d 	bl	8001388 <HAL_IWDG_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000914:	f000 f89a 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000114 	.word	0x20000114
 8000920:	40003000 	.word	0x40003000

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fa64 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f80d 	bl	800094a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff ff4e 	bl	80007d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000934:	f000 f97c 	bl	8000c30 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8000938:	f7ff ffd6 	bl	80008e8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800093c:	f003 f82a 	bl	8003994 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000940:	f7ff fe5e 	bl	8000600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000944:	f003 f84a 	bl	80039dc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000948:	e7fe      	b.n	8000948 <main+0x24>

0800094a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b094      	sub	sp, #80	; 0x50
 800094e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	2238      	movs	r2, #56	; 0x38
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f006 facb 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000970:	f000 fd5a 	bl	8001428 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000974:	230a      	movs	r3, #10
 8000976:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000982:	2301      	movs	r3, #1
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800098e:	2304      	movs	r3, #4
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000992:	234b      	movs	r3, #75	; 0x4b
 8000994:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000996:	2302      	movs	r3, #2
 8000998:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800099a:	2302      	movs	r3, #2
 800099c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fdf2 	bl	8001590 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009b2:	f000 f84b 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2303      	movs	r3, #3
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2104      	movs	r1, #4
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f8f6 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009da:	f000 f837 	bl	8000a4c <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <vPrintStringAndNumber>:

/* USER CODE BEGIN 4 */
void vPrintStringAndNumber(uint32_t value) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  snprintf(char_buffer, sizeof(char_buffer), "\nValue: %ld\n", value);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <vPrintStringAndNumber+0x34>)
 80009f4:	2164      	movs	r1, #100	; 0x64
 80009f6:	480a      	ldr	r0, [pc, #40]	; (8000a20 <vPrintStringAndNumber+0x38>)
 80009f8:	f006 fb92 	bl	8007120 <sniprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*) char_buffer, strlen(char_buffer),
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <vPrintStringAndNumber+0x38>)
 80009fe:	f7ff fc0f 	bl	8000220 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	4905      	ldr	r1, [pc, #20]	; (8000a20 <vPrintStringAndNumber+0x38>)
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <vPrintStringAndNumber+0x3c>)
 8000a0e:	f002 f933 	bl	8002c78 <HAL_UART_Transmit>
  HAL_MAX_DELAY);
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	0800796c 	.word	0x0800796c
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000174 	.word	0x20000174

08000a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3a:	f000 f9f3 	bl	8000e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40014800 	.word	0x40014800

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_MspInit+0x50>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_MspInit+0x50>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x50>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x50>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <HAL_MspInit+0x50>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x50>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 fa9b 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a9a:	f000 fd69 	bl	8001570 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <HAL_InitTick+0xc4>)
 8000abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac0:	4a2b      	ldr	r2, [pc, #172]	; (8000b70 <HAL_InitTick+0xc4>)
 8000ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <HAL_InitTick+0xc4>)
 8000aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fa44 	bl	8001f6c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ae4:	f001 fa2c 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 8000ae8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <HAL_InitTick+0xc8>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	0c9b      	lsrs	r3, r3, #18
 8000af4:	3b01      	subs	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_InitTick+0xcc>)
 8000afa:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <HAL_InitTick+0xd0>)
 8000afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_InitTick+0xcc>)
 8000b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b04:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_InitTick+0xcc>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_InitTick+0xcc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_InitTick+0xcc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <HAL_InitTick+0xcc>)
 8000b1a:	f001 fced 	bl	80024f8 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d11b      	bne.n	8000b64 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <HAL_InitTick+0xcc>)
 8000b2e:	f001 fd45 	bl	80025bc <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d111      	bne.n	8000b64 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b40:	201a      	movs	r0, #26
 8000b42:	f000 fa5f 	bl	8001004 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d808      	bhi.n	8000b5e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	201a      	movs	r0, #26
 8000b52:	f000 fa3d 	bl	8000fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_InitTick+0xd4>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e002      	b.n	8000b64 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20000124 	.word	0x20000124
 8000b7c:	40014800 	.word	0x40014800
 8000b80:	20000070 	.word	0x20000070

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000bb6:	f001 fd79 	bl	80026ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000124 	.word	0x20000124

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f006 f944 	bl	8006e80 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20020000 	.word	0x20020000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000170 	.word	0x20000170
 8000c2c:	20003460 	.word	0x20003460

08000c30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c36:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <MX_USART3_UART_Init+0x94>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c7a:	f001 ffad 	bl	8002bd8 <HAL_UART_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c84:	f7ff fee2 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c8c:	f002 fd74 	bl	8003778 <HAL_UARTEx_SetTxFifoThreshold>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f7ff fed9 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c9e:	f002 fda9 	bl	80037f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca8:	f7ff fed0 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000cae:	f002 fd2a 	bl	8003706 <HAL_UARTEx_DisableFifoMode>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f7ff fec8 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000174 	.word	0x20000174
 8000cc4:	40004800 	.word	0x40004800

08000cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09e      	sub	sp, #120	; 0x78
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2254      	movs	r2, #84	; 0x54
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f006 f903 	bl	8006ef4 <memset>
  if(uartHandle->Instance==USART3)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_UART_MspInit+0xa8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d136      	bne.n	8000d66 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 f9a9 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d10:	f7ff fe9c 	bl	8000a4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0xac>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_UART_MspInit+0xac>)
 8000d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0xac>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0xac>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_UART_MspInit+0xac>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_UART_MspInit+0xac>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d56:	2307      	movs	r3, #7
 8000d58:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_UART_MspInit+0xb0>)
 8000d62:	f000 f95d 	bl	8001020 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3778      	adds	r7, #120	; 0x78
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40004800 	.word	0x40004800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400

08000d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000da6:	f000 f813 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f006 f86f 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dae:	f7ff fdb9 	bl	8000924 <main>

08000db2 <LoopForever>:

LoopForever:
    b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   r0, =_estack
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000dc0:	08007b34 	.word	0x08007b34
  ldr r2, =_sbss
 8000dc4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000dc8:	20003460 	.word	0x20003460

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f8db 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	200f      	movs	r0, #15
 8000e06:	f7ff fe51 	bl	8000aac <HAL_InitTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f7ff fe1f 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]

}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x1c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <HAL_IncTick+0x1c>)
 8000e34:	6013      	str	r3, [r2, #0]
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20000204 	.word	0x20000204
 8000e44:	20000074 	.word	0x20000074

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000204 	.word	0x20000204

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fde:	f7ff ff63 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff ffb3 	bl	8000f54 <NVIC_EncodePriority>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff82 	bl	8000f00 <__NVIC_SetPriority>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff56 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800102e:	e15a      	b.n	80012e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 814c 	beq.w	80012e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d017      	beq.n	80010fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	6939      	ldr	r1, [r7, #16]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80a6 	beq.w	80012e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_GPIO_Init+0x2e4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <HAL_GPIO_Init+0x2e4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6613      	str	r3, [r2, #96]	; 0x60
 80011a0:	4b58      	ldr	r3, [pc, #352]	; (8001304 <HAL_GPIO_Init+0x2e4>)
 80011a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ac:	4a56      	ldr	r2, [pc, #344]	; (8001308 <HAL_GPIO_Init+0x2e8>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d6:	d01f      	beq.n	8001218 <HAL_GPIO_Init+0x1f8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x2ec>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d019      	beq.n	8001214 <HAL_GPIO_Init+0x1f4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_GPIO_Init+0x2f0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d013      	beq.n	8001210 <HAL_GPIO_Init+0x1f0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x2f4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00d      	beq.n	800120c <HAL_GPIO_Init+0x1ec>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_GPIO_Init+0x2f8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x1e8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a48      	ldr	r2, [pc, #288]	; (800131c <HAL_GPIO_Init+0x2fc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d101      	bne.n	8001204 <HAL_GPIO_Init+0x1e4>
 8001200:	2305      	movs	r3, #5
 8001202:	e00a      	b.n	800121a <HAL_GPIO_Init+0x1fa>
 8001204:	2306      	movs	r3, #6
 8001206:	e008      	b.n	800121a <HAL_GPIO_Init+0x1fa>
 8001208:	2304      	movs	r3, #4
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1fa>
 800120c:	2303      	movs	r3, #3
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x1fa>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x1fa>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x1fa>
 8001218:	2300      	movs	r3, #0
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122a:	4937      	ldr	r1, [pc, #220]	; (8001308 <HAL_GPIO_Init+0x2e8>)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_GPIO_Init+0x300>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800125c:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_GPIO_Init+0x300>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_GPIO_Init+0x300>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_GPIO_Init+0x300>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_GPIO_Init+0x300>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_GPIO_Init+0x300>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3301      	adds	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f47f ae9d 	bne.w	8001030 <HAL_GPIO_Init+0x10>
  }
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800
 8001314:	48000c00 	.word	0x48000c00
 8001318:	48001000 	.word	0x48001000
 800131c:	48001400 	.word	0x48001400
 8001320:	40010400 	.word	0x40010400

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001340:	e002      	b.n	8001348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4013      	ands	r3, r2
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43d9      	mvns	r1, r3
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	400b      	ands	r3, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e041      	b.n	800141e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80013a2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f245 5255 	movw	r2, #21845	; 0x5555
 80013ac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6852      	ldr	r2, [r2, #4]
 80013b6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6892      	ldr	r2, [r2, #8]
 80013c0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80013c2:	f7ff fd41 	bl	8000e48 <HAL_GetTick>
 80013c6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80013c8:	e00f      	b.n	80013ea <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80013ca:	f7ff fd3d 	bl	8000e48 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b31      	cmp	r3, #49	; 0x31
 80013d6:	d908      	bls.n	80013ea <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e019      	b.n	800141e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e8      	bne.n	80013ca <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	429a      	cmp	r2, r3
 8001404:	d005      	beq.n	8001412 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68d2      	ldr	r2, [r2, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	e004      	b.n	800141c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800141a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d141      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001442:	d131      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800144a:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145c:	4a41      	ldr	r2, [pc, #260]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2232      	movs	r2, #50	; 0x32
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a3f      	ldr	r2, [pc, #252]	; (800156c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147a:	e002      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148e:	d102      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f2      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d158      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e057      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ae:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014b8:	e04d      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c0:	d141      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ce:	d131      	bne.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2232      	movs	r2, #50	; 0x32
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	3301      	adds	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001506:	e002      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3b01      	subs	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151a:	d102      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f2      	bne.n	8001508 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152e:	d112      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e011      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001544:	e007      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001554:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40007000 	.word	0x40007000
 8001568:	2000006c 	.word	0x2000006c
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6093      	str	r3, [r2, #8]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e306      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d075      	beq.n	800169a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ae:	4b97      	ldr	r3, [pc, #604]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x3e>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_OscConfig+0x44>
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05b      	beq.n	8001698 <HAL_RCC_OscConfig+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d157      	bne.n	8001698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e2e1      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x74>
 80015f6:	4b85      	ldr	r3, [pc, #532]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a84      	ldr	r2, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b7c      	ldr	r3, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7b      	ldr	r2, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001628:	4b78      	ldr	r3, [pc, #480]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a77      	ldr	r2, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a74      	ldr	r2, [pc, #464]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fbfe 	bl	8000e48 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fbfa 	bl	8000e48 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e2a6      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xc0>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fbea 	bl	8000e48 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fbe6 	bl	8000e48 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e292      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168a:	4b60      	ldr	r3, [pc, #384]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0xe8>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d075      	beq.n	8001792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a6:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x136>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d002      	beq.n	80016cc <HAL_RCC_OscConfig+0x13c>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d11f      	bne.n	800170c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x154>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e265      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	4946      	ldr	r1, [pc, #280]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f9d5 	bl	8000aac <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d043      	beq.n	8001790 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e251      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fb92 	bl	8000e48 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fb8e 	bl	8000e48 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e23a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	061b      	lsls	r3, r3, #24
 8001754:	492d      	ldr	r1, [pc, #180]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
 800175a:	e01a      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb6e 	bl	8000e48 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fb6a 	bl	8000e48 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e216      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1e0>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d041      	beq.n	8001822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb47 	bl	8000e48 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fb43 	bl	8000e48 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1ef      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ef      	beq.n	80017be <HAL_RCC_OscConfig+0x22e>
 80017de:	e020      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb2a 	bl	8000e48 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb26 	bl	8000e48 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d906      	bls.n	8001814 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1d2      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	20000070 	.word	0x20000070
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ea      	bne.n	80017f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a6 	beq.w	800197c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001834:	4b84      	ldr	r3, [pc, #528]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x2b4>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x2b6>
 8001844:	2300      	movs	r3, #0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	4a7e      	ldr	r2, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
 8001856:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b79      	ldr	r3, [pc, #484]	; (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fae3 	bl	8000e48 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fadf 	bl	8000e48 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e18b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_RCC_OscConfig+0x32e>
 80018ac:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018bc:	e024      	b.n	8001908 <HAL_RCC_OscConfig+0x378>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d110      	bne.n	80018e8 <HAL_RCC_OscConfig+0x358>
 80018c6:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	4a5e      	ldr	r2, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x378>
 80018e8:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	4a56      	ldr	r2, [pc, #344]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d016      	beq.n	800193e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fa9a 	bl	8000e48 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fa96 	bl	8000e48 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e140      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ed      	beq.n	8001918 <HAL_RCC_OscConfig+0x388>
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff fa83 	bl	8000e48 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff fa7f 	bl	8000e48 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e129      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ed      	bne.n	8001946 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001996:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa52 	bl	8000e48 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a8:	f7ff fa4e 	bl	8000e48 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0fa      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x418>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa35 	bl	8000e48 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e2:	f7ff fa31 	bl	8000e48 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0dd      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80d1 	beq.w	8001bae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f000 808b 	beq.w	8001b30 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d15e      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa0b 	bl	8000e48 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	e00c      	b.n	8001a50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fa07 	bl	8000e48 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d905      	bls.n	8001a50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0b3      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ec      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5c:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x62c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6a11      	ldr	r1, [r2, #32]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	4311      	orrs	r1, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a76:	0212      	lsls	r2, r2, #8
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a7e:	0852      	lsrs	r2, r2, #1
 8001a80:	3a01      	subs	r2, #1
 8001a82:	0552      	lsls	r2, r2, #21
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a8a:	0852      	lsrs	r2, r2, #1
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	0652      	lsls	r2, r2, #25
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a96:	06d2      	lsls	r2, r2, #27
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	4947      	ldr	r1, [pc, #284]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a44      	ldr	r2, [pc, #272]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a41      	ldr	r2, [pc, #260]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f9c6 	bl	8000e48 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f9c2 	bl	8000e48 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e06e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x530>
 8001ade:	e066      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001af2:	f023 0303 	bic.w	r3, r3, #3
 8001af6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001afe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f99e 	bl	8000e48 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f99a 	bl	8000e48 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e046      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x580>
 8001b2e:	e03e      	b.n	8001bae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e039      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_OscConfig+0x628>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d12c      	bne.n	8001baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d123      	bne.n	8001baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d11b      	bne.n	8001baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d113      	bne.n	8001baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	019f800c 	.word	0x019f800c

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e11e      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b91      	ldr	r3, [pc, #580]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d910      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b8e      	ldr	r3, [pc, #568]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 020f 	bic.w	r2, r3, #15
 8001bee:	498c      	ldr	r1, [pc, #560]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b8a      	ldr	r3, [pc, #552]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e106      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d073      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d129      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0f4      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c2c:	f000 f9d0 	bl	8001fd0 <RCC_GetSysClockFreqFromPLLSource>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4a7c      	ldr	r2, [pc, #496]	; (8001e28 <HAL_RCC_ClockConfig+0x268>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d93f      	bls.n	8001cba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c3a:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d033      	beq.n	8001cba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d12f      	bne.n	8001cba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c62:	4a70      	ldr	r2, [pc, #448]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e024      	b.n	8001cba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0c6      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c88:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0be      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c98:	f000 f8ce 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4a61      	ldr	r2, [pc, #388]	; (8001e28 <HAL_RCC_ClockConfig+0x268>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d909      	bls.n	8001cba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cae:	4a5d      	ldr	r2, [pc, #372]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4957      	ldr	r1, [pc, #348]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ccc:	f7ff f8bc 	bl	8000e48 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff f8b8 	bl	8000e48 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e095      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d023      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d14:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a42      	ldr	r2, [pc, #264]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d2c:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4936      	ldr	r1, [pc, #216]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d21d      	bcs.n	8001dac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 020f 	bic.w	r2, r3, #15
 8001d78:	4929      	ldr	r1, [pc, #164]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d80:	f7ff f862 	bl	8000e48 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff f85e 	bl	8000e48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e03b      	b.n	8001e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1ed      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4917      	ldr	r1, [pc, #92]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	490f      	ldr	r1, [pc, #60]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dea:	f000 f825 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCC_ClockConfig+0x264>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	490c      	ldr	r1, [pc, #48]	; (8001e2c <HAL_RCC_ClockConfig+0x26c>)
 8001dfc:	5ccb      	ldrb	r3, [r1, r3]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fe4c 	bl	8000aac <HAL_InitTick>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	04c4b400 	.word	0x04c4b400
 8001e2c:	08007a50 	.word	0x08007a50
 8001e30:	2000006c 	.word	0x2000006c
 8001e34:	20000070 	.word	0x20000070

08001e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e047      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e03e      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d136      	bne.n	8001edc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3301      	adds	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e96:	68d2      	ldr	r2, [r2, #12]
 8001e98:	0a12      	lsrs	r2, r2, #8
 8001e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
      break;
 8001ea4:	e00c      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb0:	68d2      	ldr	r2, [r2, #12]
 8001eb2:	0a12      	lsrs	r2, r2, #8
 8001eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
      break;
 8001ebe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0e5b      	lsrs	r3, r3, #25
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e001      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ee0:	693b      	ldr	r3, [r7, #16]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	00f42400 	.word	0x00f42400
 8001ef8:	016e3600 	.word	0x016e3600

08001efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000006c 	.word	0x2000006c

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f18:	f7ff fff0 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08007a60 	.word	0x08007a60

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f44:	f7ff ffda 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0adb      	lsrs	r3, r3, #11
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4904      	ldr	r1, [pc, #16]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08007a60 	.word	0x08007a60

08001f6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	220f      	movs	r2, #15
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_RCC_GetClockConfig+0x60>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	601a      	str	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d10c      	bne.n	800200e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffe:	68d2      	ldr	r2, [r2, #12]
 8002000:	0a12      	lsrs	r2, r2, #8
 8002002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
    break;
 800200c:	e00c      	b.n	8002028 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	0a12      	lsrs	r2, r2, #8
 800201c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    break;
 8002026:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0e5b      	lsrs	r3, r3, #25
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	016e3600 	.word	0x016e3600
 8002058:	00f42400 	.word	0x00f42400

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002064:	2300      	movs	r3, #0
 8002066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002068:	2300      	movs	r3, #0
 800206a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8098 	beq.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a3f      	ldr	r2, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b2:	f7fe fec9 	bl	8000e48 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b8:	e009      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe fec5 	bl	8000e48 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d902      	bls.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	74fb      	strb	r3, [r7, #19]
        break;
 80020cc:	e005      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ef      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d159      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01e      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fe85 	bl	8000e48 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	e00b      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fe81 	bl	8000e48 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d902      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	74fb      	strb	r3, [r7, #19]
            break;
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ec      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002184:	e008      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
 800218a:	e005      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4ba7      	ldr	r3, [pc, #668]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4aa6      	ldr	r2, [pc, #664]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b6:	4ba1      	ldr	r3, [pc, #644]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 0203 	bic.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	499d      	ldr	r1, [pc, #628]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d8:	4b98      	ldr	r3, [pc, #608]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 020c 	bic.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4995      	ldr	r1, [pc, #596]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021fa:	4b90      	ldr	r3, [pc, #576]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	498c      	ldr	r1, [pc, #560]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800221c:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4984      	ldr	r1, [pc, #528]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	497b      	ldr	r1, [pc, #492]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	4973      	ldr	r1, [pc, #460]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b6e      	ldr	r3, [pc, #440]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	496a      	ldr	r1, [pc, #424]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a4:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4962      	ldr	r1, [pc, #392]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	4959      	ldr	r1, [pc, #356]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e8:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	4951      	ldr	r1, [pc, #324]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230a:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	4948      	ldr	r1, [pc, #288]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232c:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4940      	ldr	r1, [pc, #256]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234a:	d105      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	4932      	ldr	r1, [pc, #200]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4924      	ldr	r1, [pc, #144]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d019      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242a:	d109      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
 8002438:	e002      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4926      	ldr	r1, [pc, #152]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	4918      	ldr	r1, [pc, #96]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	490a      	ldr	r1, [pc, #40]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e049      	b.n	800259e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f841 	bl	80025a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 fa60 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d001      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e054      	b.n	800267e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_TIM_Base_Start_IT+0xd0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d01d      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_TIM_Base_Start_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_TIM_Base_Start_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_TIM_Base_Start_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_TIM_Base_Start_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d115      	bne.n	8002668 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_TIM_Base_Start_IT+0xec>)
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d015      	beq.n	800267a <HAL_TIM_Base_Start_IT+0xbe>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d011      	beq.n	800267a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002666:	e008      	b.n	800267a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e000      	b.n	800267c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40013400 	.word	0x40013400
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40015000 	.word	0x40015000
 80026a8:	00010007 	.word	0x00010007

080026ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d122      	bne.n	8002708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d11b      	bne.n	8002708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0202 	mvn.w	r2, #2
 80026d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f965 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f957 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f968 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0204 	mvn.w	r2, #4
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f93b 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f92d 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f93e 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b08      	cmp	r3, #8
 8002768:	d122      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0208 	mvn.w	r2, #8
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2204      	movs	r2, #4
 8002786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f911 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f903 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f914 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d122      	bne.n	8002804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d11b      	bne.n	8002804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0210 	mvn.w	r2, #16
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2208      	movs	r2, #8
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8e7 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8d9 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f8ea 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0201 	mvn.w	r2, #1
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f8fc 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f982 	bl	8002b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286a:	d10e      	bne.n	800288a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d107      	bne.n	800288a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f975 	bl	8002b74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d10e      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f898 	bl	80029e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d10e      	bne.n	80028e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d107      	bne.n	80028e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0220 	mvn.w	r2, #32
 80028da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f935 	bl	8002b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f0:	d10f      	bne.n	8002912 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002900:	d107      	bne.n	8002912 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800290a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f93b 	bl	8002b88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002920:	d10f      	bne.n	8002942 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002930:	d107      	bne.n	8002942 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800293a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f92d 	bl	8002b9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002950:	d10f      	bne.n	8002972 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002960:	d107      	bne.n	8002972 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800296a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f91f 	bl	8002bb0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002980:	d10f      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800298c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f911 	bl	8002bc4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d017      	beq.n	8002a44 <TIM_Base_SetConfig+0x48>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d013      	beq.n	8002a44 <TIM_Base_SetConfig+0x48>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a43      	ldr	r2, [pc, #268]	; (8002b2c <TIM_Base_SetConfig+0x130>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00f      	beq.n	8002a44 <TIM_Base_SetConfig+0x48>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a42      	ldr	r2, [pc, #264]	; (8002b30 <TIM_Base_SetConfig+0x134>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <TIM_Base_SetConfig+0x48>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <TIM_Base_SetConfig+0x138>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <TIM_Base_SetConfig+0x48>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a40      	ldr	r2, [pc, #256]	; (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <TIM_Base_SetConfig+0x48>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3f      	ldr	r2, [pc, #252]	; (8002b3c <TIM_Base_SetConfig+0x140>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d108      	bne.n	8002a56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d023      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d01f      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <TIM_Base_SetConfig+0x130>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01b      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <TIM_Base_SetConfig+0x134>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d017      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2e      	ldr	r2, [pc, #184]	; (8002b34 <TIM_Base_SetConfig+0x138>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00f      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <TIM_Base_SetConfig+0x144>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <TIM_Base_SetConfig+0x148>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0x14c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_Base_SetConfig+0xaa>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <TIM_Base_SetConfig+0x140>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <TIM_Base_SetConfig+0x110>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00f      	beq.n	8002b0c <TIM_Base_SetConfig+0x110>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <TIM_Base_SetConfig+0x144>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0x110>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <TIM_Base_SetConfig+0x148>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x110>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <TIM_Base_SetConfig+0x14c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x110>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <TIM_Base_SetConfig+0x140>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40013400 	.word	0x40013400
 8002b3c:	40015000 	.word	0x40015000
 8002b40:	40014000 	.word	0x40014000
 8002b44:	40014400 	.word	0x40014400
 8002b48:	40014800 	.word	0x40014800

08002b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e042      	b.n	8002c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe f863 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8c2 	bl	8002da4 <UART_SetConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e022      	b.n	8002c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fbb2 	bl	800339c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fc39 	bl	80034e0 <UART_CheckIdleState>
 8002c6e:	4603      	mov	r3, r0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	f040 8083 	bne.w	8002d9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_UART_Transmit+0x28>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e07b      	b.n	8002d9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Transmit+0x3a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e074      	b.n	8002d9c <HAL_UART_Transmit+0x124>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cca:	f7fe f8bd 	bl	8000e48 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce8:	d108      	bne.n	8002cfc <HAL_UART_Transmit+0x84>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e003      	b.n	8002d04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002d0c:	e02c      	b.n	8002d68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fc2c 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e039      	b.n	8002d9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	3302      	adds	r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e007      	b.n	8002d56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3301      	adds	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1cc      	bne.n	8002d0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2140      	movs	r1, #64	; 0x40
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fbf9 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e006      	b.n	8002d9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b08c      	sub	sp, #48	; 0x30
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4baa      	ldr	r3, [pc, #680]	; (800307c <UART_SetConfig+0x2d8>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a9f      	ldr	r2, [pc, #636]	; (8003080 <UART_SetConfig+0x2dc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f023 010f 	bic.w	r1, r3, #15
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a90      	ldr	r2, [pc, #576]	; (8003084 <UART_SetConfig+0x2e0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d125      	bne.n	8002e94 <UART_SetConfig+0xf0>
 8002e48:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <UART_SetConfig+0x2e4>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d81a      	bhi.n	8002e8c <UART_SetConfig+0xe8>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <UART_SetConfig+0xb8>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e7d 	.word	0x08002e7d
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e85 	.word	0x08002e85
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e72:	e116      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7a:	e112      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e82:	e10e      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002e84:	2308      	movs	r3, #8
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8a:	e10a      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e92:	e106      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a7c      	ldr	r2, [pc, #496]	; (800308c <UART_SetConfig+0x2e8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d138      	bne.n	8002f10 <UART_SetConfig+0x16c>
 8002e9e:	4b7a      	ldr	r3, [pc, #488]	; (8003088 <UART_SetConfig+0x2e4>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d82d      	bhi.n	8002f08 <UART_SetConfig+0x164>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <UART_SetConfig+0x110>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ee9 	.word	0x08002ee9
 8002eb8:	08002f09 	.word	0x08002f09
 8002ebc:	08002f09 	.word	0x08002f09
 8002ec0:	08002f09 	.word	0x08002f09
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002f09 	.word	0x08002f09
 8002ecc:	08002f09 	.word	0x08002f09
 8002ed0:	08002f09 	.word	0x08002f09
 8002ed4:	08002ef1 	.word	0x08002ef1
 8002ed8:	08002f09 	.word	0x08002f09
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002f01 	.word	0x08002f01
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eee:	e0d8      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ef6:	e0d4      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efe:	e0d0      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f00:	2308      	movs	r3, #8
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f06:	e0cc      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f0e:	e0c8      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5e      	ldr	r2, [pc, #376]	; (8003090 <UART_SetConfig+0x2ec>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d125      	bne.n	8002f66 <UART_SetConfig+0x1c2>
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <UART_SetConfig+0x2e4>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d016      	beq.n	8002f56 <UART_SetConfig+0x1b2>
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d818      	bhi.n	8002f5e <UART_SetConfig+0x1ba>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d00a      	beq.n	8002f46 <UART_SetConfig+0x1a2>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d814      	bhi.n	8002f5e <UART_SetConfig+0x1ba>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <UART_SetConfig+0x19a>
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d008      	beq.n	8002f4e <UART_SetConfig+0x1aa>
 8002f3c:	e00f      	b.n	8002f5e <UART_SetConfig+0x1ba>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f44:	e0ad      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f46:	2302      	movs	r3, #2
 8002f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f4c:	e0a9      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f54:	e0a5      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f56:	2308      	movs	r3, #8
 8002f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f5c:	e0a1      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f5e:	2310      	movs	r3, #16
 8002f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f64:	e09d      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <UART_SetConfig+0x2f0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d125      	bne.n	8002fbc <UART_SetConfig+0x218>
 8002f70:	4b45      	ldr	r3, [pc, #276]	; (8003088 <UART_SetConfig+0x2e4>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f7c:	d016      	beq.n	8002fac <UART_SetConfig+0x208>
 8002f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f80:	d818      	bhi.n	8002fb4 <UART_SetConfig+0x210>
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d00a      	beq.n	8002f9c <UART_SetConfig+0x1f8>
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d814      	bhi.n	8002fb4 <UART_SetConfig+0x210>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <UART_SetConfig+0x1f0>
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d008      	beq.n	8002fa4 <UART_SetConfig+0x200>
 8002f92:	e00f      	b.n	8002fb4 <UART_SetConfig+0x210>
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9a:	e082      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fa2:	e07e      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002faa:	e07a      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002fac:	2308      	movs	r3, #8
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb2:	e076      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fba:	e072      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a35      	ldr	r2, [pc, #212]	; (8003098 <UART_SetConfig+0x2f4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d12a      	bne.n	800301c <UART_SetConfig+0x278>
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <UART_SetConfig+0x2e4>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd4:	d01a      	beq.n	800300c <UART_SetConfig+0x268>
 8002fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fda:	d81b      	bhi.n	8003014 <UART_SetConfig+0x270>
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d00c      	beq.n	8002ffc <UART_SetConfig+0x258>
 8002fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe6:	d815      	bhi.n	8003014 <UART_SetConfig+0x270>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <UART_SetConfig+0x250>
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff0:	d008      	beq.n	8003004 <UART_SetConfig+0x260>
 8002ff2:	e00f      	b.n	8003014 <UART_SetConfig+0x270>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ffa:	e052      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003002:	e04e      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8003004:	2304      	movs	r3, #4
 8003006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800300a:	e04a      	b.n	80030a2 <UART_SetConfig+0x2fe>
 800300c:	2308      	movs	r3, #8
 800300e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003012:	e046      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8003014:	2310      	movs	r3, #16
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800301a:	e042      	b.n	80030a2 <UART_SetConfig+0x2fe>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a17      	ldr	r2, [pc, #92]	; (8003080 <UART_SetConfig+0x2dc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d13a      	bne.n	800309c <UART_SetConfig+0x2f8>
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <UART_SetConfig+0x2e4>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003030:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003034:	d01a      	beq.n	800306c <UART_SetConfig+0x2c8>
 8003036:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800303a:	d81b      	bhi.n	8003074 <UART_SetConfig+0x2d0>
 800303c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003040:	d00c      	beq.n	800305c <UART_SetConfig+0x2b8>
 8003042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003046:	d815      	bhi.n	8003074 <UART_SetConfig+0x2d0>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <UART_SetConfig+0x2b0>
 800304c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003050:	d008      	beq.n	8003064 <UART_SetConfig+0x2c0>
 8003052:	e00f      	b.n	8003074 <UART_SetConfig+0x2d0>
 8003054:	2300      	movs	r3, #0
 8003056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305a:	e022      	b.n	80030a2 <UART_SetConfig+0x2fe>
 800305c:	2302      	movs	r3, #2
 800305e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003062:	e01e      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800306a:	e01a      	b.n	80030a2 <UART_SetConfig+0x2fe>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003072:	e016      	b.n	80030a2 <UART_SetConfig+0x2fe>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800307a:	e012      	b.n	80030a2 <UART_SetConfig+0x2fe>
 800307c:	cfff69f3 	.word	0xcfff69f3
 8003080:	40008000 	.word	0x40008000
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	40004400 	.word	0x40004400
 8003090:	40004800 	.word	0x40004800
 8003094:	40004c00 	.word	0x40004c00
 8003098:	40005000 	.word	0x40005000
 800309c:	2310      	movs	r3, #16
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4aae      	ldr	r2, [pc, #696]	; (8003360 <UART_SetConfig+0x5bc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	f040 8097 	bne.w	80031dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d823      	bhi.n	80030fe <UART_SetConfig+0x35a>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <UART_SetConfig+0x318>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030e1 	.word	0x080030e1
 80030c0:	080030ff 	.word	0x080030ff
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080030ff 	.word	0x080030ff
 80030cc:	080030ef 	.word	0x080030ef
 80030d0:	080030ff 	.word	0x080030ff
 80030d4:	080030ff 	.word	0x080030ff
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	080030f7 	.word	0x080030f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7fe ff18 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030e6:	e010      	b.n	800310a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e8:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <UART_SetConfig+0x5c0>)
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030ec:	e00d      	b.n	800310a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ee:	f7fe fea3 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030f4:	e009      	b.n	800310a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030fc:	e005      	b.n	800310a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8130 	beq.w	8003372 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	4a94      	ldr	r2, [pc, #592]	; (8003368 <UART_SetConfig+0x5c4>)
 8003118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800311c:	461a      	mov	r2, r3
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	fbb3 f3f2 	udiv	r3, r3, r2
 8003124:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	429a      	cmp	r2, r3
 8003134:	d305      	bcc.n	8003142 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	429a      	cmp	r2, r3
 8003140:	d903      	bls.n	800314a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003148:	e113      	b.n	8003372 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	2200      	movs	r2, #0
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	60fa      	str	r2, [r7, #12]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	4a84      	ldr	r2, [pc, #528]	; (8003368 <UART_SetConfig+0x5c4>)
 8003158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800315c:	b29b      	uxth	r3, r3
 800315e:	2200      	movs	r2, #0
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800316c:	f7fd f8b0 	bl	80002d0 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	020b      	lsls	r3, r1, #8
 8003182:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003186:	0202      	lsls	r2, r0, #8
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	6849      	ldr	r1, [r1, #4]
 800318c:	0849      	lsrs	r1, r1, #1
 800318e:	2000      	movs	r0, #0
 8003190:	460c      	mov	r4, r1
 8003192:	4605      	mov	r5, r0
 8003194:	eb12 0804 	adds.w	r8, r2, r4
 8003198:	eb43 0905 	adc.w	r9, r3, r5
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	469a      	mov	sl, r3
 80031a4:	4693      	mov	fp, r2
 80031a6:	4652      	mov	r2, sl
 80031a8:	465b      	mov	r3, fp
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	f7fd f88f 	bl	80002d0 <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4613      	mov	r3, r2
 80031b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c0:	d308      	bcc.n	80031d4 <UART_SetConfig+0x430>
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c8:	d204      	bcs.n	80031d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e0ce      	b.n	8003372 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031da:	e0ca      	b.n	8003372 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e4:	d166      	bne.n	80032b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80031e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d827      	bhi.n	800323e <UART_SetConfig+0x49a>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x450>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003229 	.word	0x08003229
 8003200:	0800323f 	.word	0x0800323f
 8003204:	0800322f 	.word	0x0800322f
 8003208:	0800323f 	.word	0x0800323f
 800320c:	0800323f 	.word	0x0800323f
 8003210:	0800323f 	.word	0x0800323f
 8003214:	08003237 	.word	0x08003237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7fe fe7c 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 800321c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800321e:	e014      	b.n	800324a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7fe fe8e 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 8003224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003226:	e010      	b.n	800324a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003228:	4b4e      	ldr	r3, [pc, #312]	; (8003364 <UART_SetConfig+0x5c0>)
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800322c:	e00d      	b.n	800324a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe fe03 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003234:	e009      	b.n	800324a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800323c:	e005      	b.n	800324a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8090 	beq.w	8003372 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	4a44      	ldr	r2, [pc, #272]	; (8003368 <UART_SetConfig+0x5c4>)
 8003258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800325c:	461a      	mov	r2, r3
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	fbb3 f3f2 	udiv	r3, r3, r2
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	441a      	add	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	d916      	bls.n	80032ac <UART_SetConfig+0x508>
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003284:	d212      	bcs.n	80032ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f023 030f 	bic.w	r3, r3, #15
 800328e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	b29a      	uxth	r2, r3
 800329c:	8bfb      	ldrh	r3, [r7, #30]
 800329e:	4313      	orrs	r3, r2
 80032a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	8bfa      	ldrh	r2, [r7, #30]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e062      	b.n	8003372 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032b2:	e05e      	b.n	8003372 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d828      	bhi.n	800330e <UART_SetConfig+0x56a>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0x520>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	080032f9 	.word	0x080032f9
 80032d0:	0800330f 	.word	0x0800330f
 80032d4:	080032ff 	.word	0x080032ff
 80032d8:	0800330f 	.word	0x0800330f
 80032dc:	0800330f 	.word	0x0800330f
 80032e0:	0800330f 	.word	0x0800330f
 80032e4:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7fe fe14 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ee:	e014      	b.n	800331a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe fe26 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 80032f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032f6:	e010      	b.n	800331a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <UART_SetConfig+0x5c0>)
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032fc:	e00d      	b.n	800331a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7fe fd9b 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003304:	e009      	b.n	800331a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800330c:	e005      	b.n	800331a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003318:	bf00      	nop
    }

    if (pclk != 0U)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d028      	beq.n	8003372 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	4a10      	ldr	r2, [pc, #64]	; (8003368 <UART_SetConfig+0x5c4>)
 8003326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800332a:	461a      	mov	r2, r3
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	441a      	add	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	d910      	bls.n	800336c <UART_SetConfig+0x5c8>
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d20c      	bcs.n	800336c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	b29a      	uxth	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e009      	b.n	8003372 <UART_SetConfig+0x5ce>
 800335e:	bf00      	nop
 8003360:	40008000 	.word	0x40008000
 8003364:	00f42400 	.word	0x00f42400
 8003368:	08007a68 	.word	0x08007a68
      }
      else
      {
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2201      	movs	r2, #1
 8003376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2201      	movs	r2, #1
 800337e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2200      	movs	r2, #0
 800338c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800338e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003392:	4618      	mov	r0, r3
 8003394:	3730      	adds	r7, #48	; 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800339c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349a:	d10a      	bne.n	80034b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f0:	f7fd fcaa 	bl	8000e48 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d10e      	bne.n	8003522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f82f 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e025      	b.n	800356e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d10e      	bne.n	800354e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f819 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e00f      	b.n	800356e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b09c      	sub	sp, #112	; 0x70
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003586:	e0a9      	b.n	80036dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	f000 80a5 	beq.w	80036dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fd fc59 	bl	8000e48 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80035a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d140      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035bc:	667b      	str	r3, [r7, #100]	; 0x64
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e6      	bne.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3308      	adds	r3, #8
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	663b      	str	r3, [r7, #96]	; 0x60
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3308      	adds	r3, #8
 80035f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80035fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e5      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e069      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d051      	beq.n	80036dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003646:	d149      	bne.n	80036dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003650:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
 8003672:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e6      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	66bb      	str	r3, [r7, #104]	; 0x68
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036a4:	623a      	str	r2, [r7, #32]
 80036a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e010      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	f43f af46 	beq.w	8003588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3770      	adds	r7, #112	; 0x70
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_UARTEx_DisableFifoMode+0x16>
 8003718:	2302      	movs	r3, #2
 800371a:	e027      	b.n	800376c <HAL_UARTEx_DisableFifoMode+0x66>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800374a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e02d      	b.n	80037ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f84f 	bl	8003870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e02d      	b.n	8003868 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f811 	bl	8003870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003890:	e031      	b.n	80038f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003896:	2308      	movs	r3, #8
 8003898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	0e5b      	lsrs	r3, r3, #25
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	0f5b      	lsrs	r3, r3, #29
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038ba:	7bbb      	ldrb	r3, [r7, #14]
 80038bc:	7b3a      	ldrb	r2, [r7, #12]
 80038be:	4911      	ldr	r1, [pc, #68]	; (8003904 <UARTEx_SetNbDataToProcess+0x94>)
 80038c0:	5c8a      	ldrb	r2, [r1, r2]
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c6:	7b3a      	ldrb	r2, [r7, #12]
 80038c8:	490f      	ldr	r1, [pc, #60]	; (8003908 <UARTEx_SetNbDataToProcess+0x98>)
 80038ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	7b7a      	ldrb	r2, [r7, #13]
 80038dc:	4909      	ldr	r1, [pc, #36]	; (8003904 <UARTEx_SetNbDataToProcess+0x94>)
 80038de:	5c8a      	ldrb	r2, [r1, r2]
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e4:	7b7a      	ldrb	r2, [r7, #13]
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <UARTEx_SetNbDataToProcess+0x98>)
 80038e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	08007a80 	.word	0x08007a80
 8003908:	08007a88 	.word	0x08007a88

0800390c <__NVIC_SetPriority>:
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	; (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <SysTick_Handler+0x1c>)
 8003966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003968:	f002 fcb2 	bl	80062d0 <xTaskGetSchedulerState>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003972:	f000 fec1 	bl	80046f8 <xPortSysTickHandler>
  }
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	e000e010 	.word	0xe000e010

08003980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003984:	2100      	movs	r1, #0
 8003986:	f06f 0004 	mvn.w	r0, #4
 800398a:	f7ff ffbf 	bl	800390c <__NVIC_SetPriority>
#endif
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800399a:	f3ef 8305 	mrs	r3, IPSR
 800399e:	603b      	str	r3, [r7, #0]
  return(result);
 80039a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039a6:	f06f 0305 	mvn.w	r3, #5
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e00c      	b.n	80039c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <osKernelInitialize+0x44>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <osKernelInitialize+0x44>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039bc:	2300      	movs	r3, #0
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	e002      	b.n	80039c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
 80039c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000208 	.word	0x20000208

080039dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e2:	f3ef 8305 	mrs	r3, IPSR
 80039e6:	603b      	str	r3, [r7, #0]
  return(result);
 80039e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80039ee:	f06f 0305 	mvn.w	r3, #5
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	e010      	b.n	8003a18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <osKernelStart+0x48>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d109      	bne.n	8003a12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039fe:	f7ff ffbf 	bl	8003980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <osKernelStart+0x48>)
 8003a04:	2202      	movs	r2, #2
 8003a06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a08:	f001 fe84 	bl	8005714 <vTaskStartScheduler>
      stat = osOK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	e002      	b.n	8003a18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295
 8003a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a18:	687b      	ldr	r3, [r7, #4]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000208 	.word	0x20000208

08003a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	; 0x38
 8003a2c:	af04      	add	r7, sp, #16
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a38:	f3ef 8305 	mrs	r3, IPSR
 8003a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d17e      	bne.n	8003b42 <osThreadNew+0x11a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07b      	beq.n	8003b42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a4e:	2318      	movs	r3, #24
 8003a50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d045      	beq.n	8003aee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <osThreadNew+0x48>
        name = attr->name;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <osThreadNew+0x6e>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b38      	cmp	r3, #56	; 0x38
 8003a88:	d805      	bhi.n	8003a96 <osThreadNew+0x6e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <osThreadNew+0x72>
        return (NULL);
 8003a96:	2300      	movs	r3, #0
 8003a98:	e054      	b.n	8003b44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <osThreadNew+0xa8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2bd3      	cmp	r3, #211	; 0xd3
 8003ab8:	d90a      	bls.n	8003ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <osThreadNew+0xa8>
        mem = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	e010      	b.n	8003af2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10c      	bne.n	8003af2 <osThreadNew+0xca>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d108      	bne.n	8003af2 <osThreadNew+0xca>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <osThreadNew+0xca>
          mem = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e001      	b.n	8003af2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d110      	bne.n	8003b1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b00:	9202      	str	r2, [sp, #8]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 fba8 	bl	8005264 <xTaskCreateStatic>
 8003b14:	4603      	mov	r3, r0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	e013      	b.n	8003b42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d110      	bne.n	8003b42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f001 fbf3 	bl	800531e <xTaskCreate>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d001      	beq.n	8003b42 <osThreadNew+0x11a>
            hTask = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b42:	693b      	ldr	r3, [r7, #16]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b52:	f3ef 8305 	mrs	r3, IPSR
 8003b56:	603b      	str	r3, [r7, #0]
  return(result);
 8003b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <osThreadYield+0x1a>
    stat = osErrorISR;
 8003b5e:	f06f 0305 	mvn.w	r3, #5
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	e009      	b.n	8003b7a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <osThreadYield+0x3c>)
 8003b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003b7a:	687b      	ldr	r3, [r7, #4]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b94:	f3ef 8305 	mrs	r3, IPSR
 8003b98:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <osDelay+0x1c>
    stat = osErrorISR;
 8003ba0:	f06f 0305 	mvn.w	r3, #5
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e007      	b.n	8003bb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f001 fd14 	bl	80055e0 <vTaskDelay>
    }
  }

  return (stat);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f003 f937 	bl	8006e3e <pvTimerGetTimerID>
 8003bd0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	6852      	ldr	r2, [r2, #4]
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
  }
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c00:	f3ef 8305 	mrs	r3, IPSR
 8003c04:	613b      	str	r3, [r7, #16]
  return(result);
 8003c06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d163      	bne.n	8003cd4 <osTimerNew+0xe8>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d060      	beq.n	8003cd4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003c12:	2008      	movs	r0, #8
 8003c14:	f000 f90e 	bl	8003e34 <pvPortMalloc>
 8003c18:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d059      	beq.n	8003cd4 <osTimerNew+0xe8>
      callb->func = func;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <osTimerNew+0x4c>
        reload = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e001      	b.n	8003c3c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01c      	beq.n	8003c86 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <osTimerNew+0x6e>
          name = attr->name;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d006      	beq.n	8003c70 <osTimerNew+0x84>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b2b      	cmp	r3, #43	; 0x2b
 8003c68:	d902      	bls.n	8003c70 <osTimerNew+0x84>
          mem = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e00c      	b.n	8003c8a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d108      	bne.n	8003c8a <osTimerNew+0x9e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <osTimerNew+0x9e>
            mem = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e001      	b.n	8003c8a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10c      	bne.n	8003caa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <osTimerNew+0xf4>)
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ca2:	f002 fd08 	bl	80066b6 <xTimerCreateStatic>
 8003ca6:	6238      	str	r0, [r7, #32]
 8003ca8:	e00b      	b.n	8003cc2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d108      	bne.n	8003cc2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <osTimerNew+0xf4>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cbc:	f002 fcda 	bl	8006674 <xTimerCreate>
 8003cc0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <osTimerNew+0xe8>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <osTimerNew+0xe8>
        vPortFree (callb);
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f000 f980 	bl	8003fd4 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	08003bc3 	.word	0x08003bc3

08003ce4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf4:	f3ef 8305 	mrs	r3, IPSR
 8003cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d15f      	bne.n	8003dc0 <osMessageQueueNew+0xdc>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d05c      	beq.n	8003dc0 <osMessageQueueNew+0xdc>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d059      	beq.n	8003dc0 <osMessageQueueNew+0xdc>
    mem = -1;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d029      	beq.n	8003d6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <osMessageQueueNew+0x62>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b4f      	cmp	r3, #79	; 0x4f
 8003d26:	d90e      	bls.n	8003d46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <osMessageQueueNew+0x62>
        mem = 1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e014      	b.n	8003d70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d110      	bne.n	8003d70 <osMessageQueueNew+0x8c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <osMessageQueueNew+0x8c>
          mem = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	e001      	b.n	8003d70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10b      	bne.n	8003d8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	9100      	str	r1, [sp, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fdaf 	bl	80048e8 <xQueueGenericCreateStatic>
 8003d8a:	61f8      	str	r0, [r7, #28]
 8003d8c:	e008      	b.n	8003da0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003d94:	2200      	movs	r2, #0
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fe1d 	bl	80049d8 <xQueueGenericCreate>
 8003d9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00c      	beq.n	8003dc0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e001      	b.n	8003db8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	69f8      	ldr	r0, [r7, #28]
 8003dbc:	f001 f9f4 	bl	80051a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ddc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <vApplicationGetIdleTaskMemory+0x30>)
 8003de2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	2000020c 	.word	0x2000020c
 8003dfc:	200002e0 	.word	0x200002e0

08003e00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <vApplicationGetTimerTaskMemory+0x2c>)
 8003e10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <vApplicationGetTimerTaskMemory+0x30>)
 8003e16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1e:	601a      	str	r2, [r3, #0]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	200004e0 	.word	0x200004e0
 8003e30:	200005b4 	.word	0x200005b4

08003e34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e40:	f001 fcda 	bl	80057f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e44:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <pvPortMalloc+0x188>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e4c:	f000 f924 	bl	8004098 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e50:	4b5b      	ldr	r3, [pc, #364]	; (8003fc0 <pvPortMalloc+0x18c>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f040 8093 	bne.w	8003f84 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01d      	beq.n	8003ea0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e64:	2208      	movs	r2, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d014      	beq.n	8003ea0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f023 0307 	bic.w	r3, r3, #7
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d06e      	beq.n	8003f84 <pvPortMalloc+0x150>
 8003ea6:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <pvPortMalloc+0x190>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d869      	bhi.n	8003f84 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003eb0:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <pvPortMalloc+0x194>)
 8003eb2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003eb4:	4b44      	ldr	r3, [pc, #272]	; (8003fc8 <pvPortMalloc+0x194>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eba:	e004      	b.n	8003ec6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d903      	bls.n	8003ed8 <pvPortMalloc+0xa4>
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ed8:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <pvPortMalloc+0x188>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d050      	beq.n	8003f84 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	2308      	movs	r3, #8
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d91f      	bls.n	8003f44 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <pvPortMalloc+0xf8>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	613b      	str	r3, [r7, #16]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1ad2      	subs	r2, r2, r3
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f3e:	69b8      	ldr	r0, [r7, #24]
 8003f40:	f000 f90c 	bl	800415c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <pvPortMalloc+0x190>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <pvPortMalloc+0x190>)
 8003f50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <pvPortMalloc+0x190>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <pvPortMalloc+0x198>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d203      	bcs.n	8003f66 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <pvPortMalloc+0x190>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <pvPortMalloc+0x198>)
 8003f64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <pvPortMalloc+0x18c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <pvPortMalloc+0x19c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <pvPortMalloc+0x19c>)
 8003f82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f84:	f001 fc46 	bl	8005814 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003f8e:	f7fc fb2f 	bl	80005f0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <pvPortMalloc+0x17e>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60fb      	str	r3, [r7, #12]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <pvPortMalloc+0x17c>
	return pvReturn;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3728      	adds	r7, #40	; 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20002dbc 	.word	0x20002dbc
 8003fc0:	20002dd0 	.word	0x20002dd0
 8003fc4:	20002dc0 	.word	0x20002dc0
 8003fc8:	20002db4 	.word	0x20002db4
 8003fcc:	20002dc4 	.word	0x20002dc4
 8003fd0:	20002dc8 	.word	0x20002dc8

08003fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d04d      	beq.n	8004082 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	425b      	negs	r3, r3
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <vPortFree+0xb8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <vPortFree+0x44>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	60fb      	str	r3, [r7, #12]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <vPortFree+0x62>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60bb      	str	r3, [r7, #8]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4b14      	ldr	r3, [pc, #80]	; (800408c <vPortFree+0xb8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01e      	beq.n	8004082 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11a      	bne.n	8004082 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <vPortFree+0xb8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	43db      	mvns	r3, r3
 8004056:	401a      	ands	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800405c:	f001 fbcc 	bl	80057f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <vPortFree+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4413      	add	r3, r2
 800406a:	4a09      	ldr	r2, [pc, #36]	; (8004090 <vPortFree+0xbc>)
 800406c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800406e:	6938      	ldr	r0, [r7, #16]
 8004070:	f000 f874 	bl	800415c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <vPortFree+0xc0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	4a06      	ldr	r2, [pc, #24]	; (8004094 <vPortFree+0xc0>)
 800407c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800407e:	f001 fbc9 	bl	8005814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20002dd0 	.word	0x20002dd0
 8004090:	20002dc0 	.word	0x20002dc0
 8004094:	20002dcc 	.word	0x20002dcc

08004098 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800409e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80040a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <prvHeapInit+0xac>)
 80040a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3307      	adds	r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <prvHeapInit+0xac>)
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040d0:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <prvHeapInit+0xb0>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040d6:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <prvHeapInit+0xb0>)
 80040d8:	2200      	movs	r2, #0
 80040da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4413      	add	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040e4:	2208      	movs	r2, #8
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0307 	bic.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <prvHeapInit+0xb4>)
 80040f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <prvHeapInit+0xb4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <prvHeapInit+0xb4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <prvHeapInit+0xb4>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <prvHeapInit+0xb8>)
 8004126:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a09      	ldr	r2, [pc, #36]	; (8004154 <prvHeapInit+0xbc>)
 800412e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <prvHeapInit+0xc0>)
 8004132:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004136:	601a      	str	r2, [r3, #0]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	200009b4 	.word	0x200009b4
 8004148:	20002db4 	.word	0x20002db4
 800414c:	20002dbc 	.word	0x20002dbc
 8004150:	20002dc4 	.word	0x20002dc4
 8004154:	20002dc0 	.word	0x20002dc0
 8004158:	20002dd0 	.word	0x20002dd0

0800415c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <prvInsertBlockIntoFreeList+0xac>)
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e002      	b.n	8004170 <prvInsertBlockIntoFreeList+0x14>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d8f7      	bhi.n	800416a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4413      	add	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d108      	bne.n	800419e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	441a      	add	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	441a      	add	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d118      	bne.n	80041e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <prvInsertBlockIntoFreeList+0xb0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d00d      	beq.n	80041da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e008      	b.n	80041ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <prvInsertBlockIntoFreeList+0xb0>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e003      	b.n	80041ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d002      	beq.n	80041fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20002db4 	.word	0x20002db4
 800420c:	20002dbc 	.word	0x20002dbc

08004210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f103 0208 	add.w	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f103 0208 	add.w	r2, r3, #8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f103 0208 	add.w	r2, r3, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	601a      	str	r2, [r3, #0]
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d103      	bne.n	80042d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	e00c      	b.n	80042ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3308      	adds	r3, #8
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e002      	b.n	80042e0 <vListInsert+0x2e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d2f6      	bcs.n	80042da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6892      	ldr	r2, [r2, #8]
 800433a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6852      	ldr	r2, [r2, #4]
 8004344:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d103      	bne.n	8004358 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	1e5a      	subs	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b04      	subs	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b04      	subs	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f023 0201 	bic.w	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043a8:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <pxPortInitialiseStack+0x64>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b14      	subs	r3, #20
 80043b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b04      	subs	r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f06f 0202 	mvn.w	r2, #2
 80043c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b20      	subs	r3, #32
 80043cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	080043e1 	.word	0x080043e1

080043e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <prvTaskExitError+0x54>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d00a      	beq.n	800440a <prvTaskExitError+0x2a>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <prvTaskExitError+0x28>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60bb      	str	r3, [r7, #8]
}
 800441c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800441e:	bf00      	nop
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0fc      	beq.n	8004420 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000078 	.word	0x20000078
	...

08004440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <pxCurrentTCBConst2>)
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6808      	ldr	r0, [r1, #0]
 8004446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	f380 8809 	msr	PSP, r0
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	4770      	bx	lr
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst2>:
 8004460:	20002e1c 	.word	0x20002e1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <prvPortStartFirstTask+0x24>)
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f380 8808 	msr	MSP, r0
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8814 	msr	CONTROL, r0
 800447a:	b662      	cpsie	i
 800447c:	b661      	cpsie	f
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	df00      	svc	0
 8004488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800448a:	bf00      	nop
 800448c:	e000ed08 	.word	0xe000ed08

08004490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004496:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <xPortStartScheduler+0x120>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a46      	ldr	r2, [pc, #280]	; (80045b4 <xPortStartScheduler+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10a      	bne.n	80044b6 <xPortStartScheduler+0x26>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	613b      	str	r3, [r7, #16]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044b6:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <xPortStartScheduler+0x120>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <xPortStartScheduler+0x128>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10a      	bne.n	80044d6 <xPortStartScheduler+0x46>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60fb      	str	r3, [r7, #12]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <xPortStartScheduler+0x12c>)
 80044d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <xPortStartScheduler+0x130>)
 80044fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <xPortStartScheduler+0x134>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004504:	e009      	b.n	800451a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004506:	4b2f      	ldr	r3, [pc, #188]	; (80045c4 <xPortStartScheduler+0x134>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <xPortStartScheduler+0x134>)
 800450e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	d0ef      	beq.n	8004506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <xPortStartScheduler+0x134>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1c3 0307 	rsb	r3, r3, #7
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00a      	beq.n	8004548 <xPortStartScheduler+0xb8>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60bb      	str	r3, [r7, #8]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <xPortStartScheduler+0x134>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <xPortStartScheduler+0x134>)
 8004550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <xPortStartScheduler+0x134>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <xPortStartScheduler+0x134>)
 800455c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <xPortStartScheduler+0x138>)
 800456c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <xPortStartScheduler+0x138>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <xPortStartScheduler+0x138>)
 8004578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800457c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800457e:	f000 f8dd 	bl	800473c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <xPortStartScheduler+0x13c>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004588:	f000 f8fc 	bl	8004784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <xPortStartScheduler+0x140>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <xPortStartScheduler+0x140>)
 8004592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004598:	f7ff ff66 	bl	8004468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800459c:	f001 fb32 	bl	8005c04 <vTaskSwitchContext>
	prvTaskExitError();
 80045a0:	f7ff ff1e 	bl	80043e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	410fc271 	.word	0x410fc271
 80045b8:	410fc270 	.word	0x410fc270
 80045bc:	e000e400 	.word	0xe000e400
 80045c0:	20002dd4 	.word	0x20002dd4
 80045c4:	20002dd8 	.word	0x20002dd8
 80045c8:	e000ed20 	.word	0xe000ed20
 80045cc:	20000078 	.word	0x20000078
 80045d0:	e000ef34 	.word	0xe000ef34

080045d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <vPortEnterCritical+0x58>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <vPortEnterCritical+0x58>)
 80045f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <vPortEnterCritical+0x58>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10f      	bne.n	8004620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <vPortEnterCritical+0x5c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <vPortEnterCritical+0x4c>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	603b      	str	r3, [r7, #0]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <vPortEnterCritical+0x4a>
	}
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000078 	.word	0x20000078
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <vPortExitCritical+0x50>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <vPortExitCritical+0x24>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	607b      	str	r3, [r7, #4]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <vPortExitCritical+0x50>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <vPortExitCritical+0x50>)
 8004660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <vPortExitCritical+0x50>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <vPortExitCritical+0x42>
 800466a:	2300      	movs	r3, #0
 800466c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000078 	.word	0x20000078
	...

08004690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004690:	f3ef 8009 	mrs	r0, PSP
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <pxCurrentTCBConst>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f01e 0f10 	tst.w	lr, #16
 80046a0:	bf08      	it	eq
 80046a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046b4:	f380 8811 	msr	BASEPRI, r0
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f001 faa0 	bl	8005c04 <vTaskSwitchContext>
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f380 8811 	msr	BASEPRI, r0
 80046cc:	bc09      	pop	{r0, r3}
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	6808      	ldr	r0, [r1, #0]
 80046d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d6:	f01e 0f10 	tst.w	lr, #16
 80046da:	bf08      	it	eq
 80046dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046e0:	f380 8809 	msr	PSP, r0
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w

080046f0 <pxCurrentTCBConst>:
 80046f0:	20002e1c 	.word	0x20002e1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop

080046f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004712:	f001 f9bd 	bl	8005a90 <xTaskIncrementTick>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <xPortSysTickHandler+0x40>)
 800471e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f383 8811 	msr	BASEPRI, r3
}
 800472e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <vPortSetupTimerInterrupt+0x38>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <vPortSetupTimerInterrupt+0x3c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <vPortSetupTimerInterrupt+0x40>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <vPortSetupTimerInterrupt+0x44>)
 800475a:	3b01      	subs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e010 	.word	0xe000e010
 8004774:	e000e018 	.word	0xe000e018
 8004778:	2000006c 	.word	0x2000006c
 800477c:	10624dd3 	.word	0x10624dd3
 8004780:	e000e014 	.word	0xe000e014

08004784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004794 <vPortEnableVFP+0x10>
 8004788:	6801      	ldr	r1, [r0, #0]
 800478a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800478e:	6001      	str	r1, [r0, #0]
 8004790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004792:	bf00      	nop
 8004794:	e000ed88 	.word	0xe000ed88

08004798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800479e:	f3ef 8305 	mrs	r3, IPSR
 80047a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d914      	bls.n	80047d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <vPortValidateInterruptPriority+0x70>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047b4:	4b15      	ldr	r3, [pc, #84]	; (800480c <vPortValidateInterruptPriority+0x74>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	7afa      	ldrb	r2, [r7, #11]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20a      	bcs.n	80047d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047d4:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <vPortValidateInterruptPriority+0x78>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <vPortValidateInterruptPriority+0x7c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d90a      	bls.n	80047fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	603b      	str	r3, [r7, #0]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <vPortValidateInterruptPriority+0x60>
	}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000e3f0 	.word	0xe000e3f0
 800480c:	20002dd4 	.word	0x20002dd4
 8004810:	e000ed0c 	.word	0xe000ed0c
 8004814:	20002dd8 	.word	0x20002dd8

08004818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <xQueueGenericReset+0x2a>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60bb      	str	r3, [r7, #8]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004842:	f7ff fec7 	bl	80045d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	3b01      	subs	r3, #1
 8004874:	68f9      	ldr	r1, [r7, #12]
 8004876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	441a      	add	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d114      	bne.n	80048c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01a      	beq.n	80048d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3310      	adds	r3, #16
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fa7d 	bl	8005da4 <xTaskRemoveFromEventList>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d012      	beq.n	80048d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <xQueueGenericReset+0xcc>)
 80048b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	e009      	b.n	80048d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3310      	adds	r3, #16
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fca2 	bl	8004210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3324      	adds	r3, #36	; 0x24
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fc9d 	bl	8004210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f7ff fead 	bl	8004634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048da:	2301      	movs	r3, #1
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <xQueueGenericCreateStatic+0x52>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <xQueueGenericCreateStatic+0x56>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <xQueueGenericCreateStatic+0x58>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	623b      	str	r3, [r7, #32]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <xQueueGenericCreateStatic+0x7e>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <xQueueGenericCreateStatic+0x82>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <xQueueGenericCreateStatic+0x84>
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61fb      	str	r3, [r7, #28]
}
 8004982:	bf00      	nop
 8004984:	e7fe      	b.n	8004984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004986:	2350      	movs	r3, #80	; 0x50
 8004988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b50      	cmp	r3, #80	; 0x50
 800498e:	d00a      	beq.n	80049a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61bb      	str	r3, [r7, #24]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f83f 	bl	8004a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3730      	adds	r7, #48	; 0x30
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGenericCreate+0x2a>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	613b      	str	r3, [r7, #16]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3350      	adds	r3, #80	; 0x50
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fa0f 	bl	8003e34 <pvPortMalloc>
 8004a16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d011      	beq.n	8004a42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3350      	adds	r3, #80	; 0x50
 8004a26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a30:	79fa      	ldrb	r2, [r7, #7]
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f805 	bl	8004a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a42:	69bb      	ldr	r3, [r7, #24]
	}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	69b8      	ldr	r0, [r7, #24]
 8004a7e:	f7ff fecb 	bl	8004818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	; 0x38
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueGenericSend+0x32>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <xQueueGenericSend+0x40>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <xQueueGenericSend+0x44>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <xQueueGenericSend+0x46>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <xQueueGenericSend+0x60>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x6e>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericSend+0x72>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericSend+0x74>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	623b      	str	r3, [r7, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b22:	f001 fbd5 	bl	80062d0 <xTaskGetSchedulerState>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xQueueGenericSend+0x9e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueGenericSend+0xa2>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueGenericSend+0xa4>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xQueueGenericSend+0xbe>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61fb      	str	r3, [r7, #28]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b52:	f7ff fd3f 	bl	80045d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <xQueueGenericSend+0xd4>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d129      	bne.n	8004bbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6e:	f000 fa0b 	bl	8004f88 <prvCopyDataToQueue>
 8004b72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d010      	beq.n	8004b9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	3324      	adds	r3, #36	; 0x24
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f90f 	bl	8005da4 <xTaskRemoveFromEventList>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b8c:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <xQueueGenericSend+0x1f8>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	e00a      	b.n	8004bb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ba4:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <xQueueGenericSend+0x1f8>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bb4:	f7ff fd3e 	bl	8004634 <vPortExitCritical>
				return pdPASS;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e063      	b.n	8004c84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bc2:	f7ff fd37 	bl	8004634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e05c      	b.n	8004c84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 f949 	bl	8005e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bde:	f7ff fd29 	bl	8004634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be2:	f000 fe09 	bl	80057f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004be6:	f7ff fcf5 	bl	80045d4 <vPortEnterCritical>
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d103      	bne.n	8004c00 <xQueueGenericSend+0x16c>
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d103      	bne.n	8004c16 <xQueueGenericSend+0x182>
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c16:	f7ff fd0d 	bl	8004634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c1a:	1d3a      	adds	r2, r7, #4
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 f938 	bl	8005e98 <xTaskCheckForTimeOut>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d124      	bne.n	8004c78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c30:	f000 faa2 	bl	8005178 <prvIsQueueFull>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d018      	beq.n	8004c6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 f85e 	bl	8005d04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4a:	f000 fa2d 	bl	80050a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c4e:	f000 fde1 	bl	8005814 <xTaskResumeAll>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af7c 	bne.w	8004b52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <xQueueGenericSend+0x1f8>)
 8004c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	e772      	b.n	8004b52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6e:	f000 fa1b 	bl	80050a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c72:	f000 fdcf 	bl	8005814 <xTaskResumeAll>
 8004c76:	e76c      	b.n	8004b52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c7a:	f000 fa15 	bl	80050a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c7e:	f000 fdc9 	bl	8005814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3738      	adds	r7, #56	; 0x38
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b090      	sub	sp, #64	; 0x40
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <xQueueGenericSendFromISR+0x3c>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <xQueueGenericSendFromISR+0x40>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <xQueueGenericSendFromISR+0x42>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d103      	bne.n	8004cfa <xQueueGenericSendFromISR+0x6a>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <xQueueGenericSendFromISR+0x6e>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <xQueueGenericSendFromISR+0x70>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	623b      	str	r3, [r7, #32]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d1a:	f7ff fd3d 	bl	8004798 <vPortValidateInterruptPriority>
	__asm volatile
 8004d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	61fa      	str	r2, [r7, #28]
 8004d34:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004d36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <xQueueGenericSendFromISR+0xbc>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d12f      	bne.n	8004dac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d62:	f000 f911 	bl	8004f88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d112      	bne.n	8004d96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d016      	beq.n	8004da6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	3324      	adds	r3, #36	; 0x24
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 f811 	bl	8005da4 <xTaskRemoveFromEventList>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e007      	b.n	8004da6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	b25a      	sxtb	r2, r3
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004da6:	2301      	movs	r3, #1
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004daa:	e001      	b.n	8004db0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f383 8811 	msr	BASEPRI, r3
}
 8004dba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3740      	adds	r7, #64	; 0x40
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08c      	sub	sp, #48	; 0x30
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xQueueReceive+0x30>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	623b      	str	r3, [r7, #32]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <xQueueReceive+0x3e>
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <xQueueReceive+0x42>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <xQueueReceive+0x44>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <xQueueReceive+0x5e>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	61fb      	str	r3, [r7, #28]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e26:	f001 fa53 	bl	80062d0 <xTaskGetSchedulerState>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <xQueueReceive+0x6e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <xQueueReceive+0x72>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueReceive+0x74>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueReceive+0x8e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	61bb      	str	r3, [r7, #24]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e56:	f7ff fbbd 	bl	80045d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01f      	beq.n	8004ea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6a:	f000 f8f7 	bl	800505c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00f      	beq.n	8004e9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	3310      	adds	r3, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 ff8e 	bl	8005da4 <xTaskRemoveFromEventList>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <xQueueReceive+0x1bc>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e9e:	f7ff fbc9 	bl	8004634 <vPortExitCritical>
				return pdPASS;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e069      	b.n	8004f7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eac:	f7ff fbc2 	bl	8004634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e062      	b.n	8004f7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eba:	f107 0310 	add.w	r3, r7, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 ffd4 	bl	8005e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ec8:	f7ff fbb4 	bl	8004634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ecc:	f000 fc94 	bl	80057f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ed0:	f7ff fb80 	bl	80045d4 <vPortEnterCritical>
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d103      	bne.n	8004eea <xQueueReceive+0x122>
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <xQueueReceive+0x138>
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	f7ff fb98 	bl	8004634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f04:	1d3a      	adds	r2, r7, #4
 8004f06:	f107 0310 	add.w	r3, r7, #16
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 ffc3 	bl	8005e98 <xTaskCheckForTimeOut>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d123      	bne.n	8004f60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f1a:	f000 f917 	bl	800514c <prvIsQueueEmpty>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d017      	beq.n	8004f54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	3324      	adds	r3, #36	; 0x24
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fee9 	bl	8005d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f34:	f000 f8b8 	bl	80050a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f38:	f000 fc6c 	bl	8005814 <xTaskResumeAll>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d189      	bne.n	8004e56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <xQueueReceive+0x1bc>)
 8004f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	e780      	b.n	8004e56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f56:	f000 f8a7 	bl	80050a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f5a:	f000 fc5b 	bl	8005814 <xTaskResumeAll>
 8004f5e:	e77a      	b.n	8004e56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f62:	f000 f8a1 	bl	80050a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f66:	f000 fc55 	bl	8005814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6c:	f000 f8ee 	bl	800514c <prvIsQueueEmpty>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f43f af6f 	beq.w	8004e56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3730      	adds	r7, #48	; 0x30
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10d      	bne.n	8004fc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d14d      	bne.n	800504a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 f9aa 	bl	800630c <xTaskPriorityDisinherit>
 8004fb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	e043      	b.n	800504a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d119      	bne.n	8004ffc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6858      	ldr	r0, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	f001 ff80 	bl	8006ed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	441a      	add	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d32b      	bcc.n	800504a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e026      	b.n	800504a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68d8      	ldr	r0, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	461a      	mov	r2, r3
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	f001 ff66 	bl	8006ed8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	425b      	negs	r3, r3
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d207      	bcs.n	8005038 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	425b      	negs	r3, r3
 8005032:	441a      	add	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d105      	bne.n	800504a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3b01      	subs	r3, #1
 8005048:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005052:	697b      	ldr	r3, [r7, #20]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	441a      	add	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	d303      	bcc.n	8005090 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68d9      	ldr	r1, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	461a      	mov	r2, r3
 800509a:	6838      	ldr	r0, [r7, #0]
 800509c:	f001 ff1c 	bl	8006ed8 <memcpy>
	}
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050b0:	f7ff fa90 	bl	80045d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050bc:	e011      	b.n	80050e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3324      	adds	r3, #36	; 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fe6a 	bl	8005da4 <xTaskRemoveFromEventList>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050d6:	f000 ff41 	bl	8005f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	3b01      	subs	r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	dce9      	bgt.n	80050be <prvUnlockQueue+0x16>
 80050ea:	e000      	b.n	80050ee <prvUnlockQueue+0x46>
					break;
 80050ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	22ff      	movs	r2, #255	; 0xff
 80050f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050f6:	f7ff fa9d 	bl	8004634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050fa:	f7ff fa6b 	bl	80045d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005104:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005106:	e011      	b.n	800512c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d012      	beq.n	8005136 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3310      	adds	r3, #16
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fe45 	bl	8005da4 <xTaskRemoveFromEventList>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005120:	f000 ff1c 	bl	8005f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	3b01      	subs	r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800512c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005130:	2b00      	cmp	r3, #0
 8005132:	dce9      	bgt.n	8005108 <prvUnlockQueue+0x60>
 8005134:	e000      	b.n	8005138 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005136:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	22ff      	movs	r2, #255	; 0xff
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005140:	f7ff fa78 	bl	8004634 <vPortExitCritical>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005154:	f7ff fa3e 	bl	80045d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e001      	b.n	800516a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800516a:	f7ff fa63 	bl	8004634 <vPortExitCritical>

	return xReturn;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005180:	f7ff fa28 	bl	80045d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	429a      	cmp	r2, r3
 800518e:	d102      	bne.n	8005196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e001      	b.n	800519a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800519a:	f7ff fa4b 	bl	8004634 <vPortExitCritical>

	return xReturn;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e014      	b.n	80051e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051b8:	4a0f      	ldr	r2, [pc, #60]	; (80051f8 <vQueueAddToRegistry+0x50>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051c4:	490c      	ldr	r1, [pc, #48]	; (80051f8 <vQueueAddToRegistry+0x50>)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <vQueueAddToRegistry+0x50>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051da:	e006      	b.n	80051ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b07      	cmp	r3, #7
 80051e6:	d9e7      	bls.n	80051b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20002ddc 	.word	0x20002ddc

080051fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800520c:	f7ff f9e2 	bl	80045d4 <vPortEnterCritical>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005216:	b25b      	sxtb	r3, r3
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d103      	bne.n	8005226 <vQueueWaitForMessageRestricted+0x2a>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522c:	b25b      	sxtb	r3, r3
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d103      	bne.n	800523c <vQueueWaitForMessageRestricted+0x40>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800523c:	f7ff f9fa 	bl	8004634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3324      	adds	r3, #36	; 0x24
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fd7b 	bl	8005d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f7ff ff26 	bl	80050a8 <prvUnlockQueue>
	}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	; 0x38
 8005268:	af04      	add	r7, sp, #16
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	623b      	str	r3, [r7, #32]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <xTaskCreateStatic+0x46>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61fb      	str	r3, [r7, #28]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052aa:	23d4      	movs	r3, #212	; 0xd4
 80052ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2bd4      	cmp	r3, #212	; 0xd4
 80052b2:	d00a      	beq.n	80052ca <xTaskCreateStatic+0x66>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	61bb      	str	r3, [r7, #24]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01e      	beq.n	8005310 <xTaskCreateStatic+0xac>
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ea:	2300      	movs	r3, #0
 80052ec:	9303      	str	r3, [sp, #12]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	9302      	str	r3, [sp, #8]
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f850 	bl	80053a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800530a:	f000 f8f9 	bl	8005500 <prvAddNewTaskToReadyList>
 800530e:	e001      	b.n	8005314 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005314:	697b      	ldr	r3, [r7, #20]
	}
 8005316:	4618      	mov	r0, r3
 8005318:	3728      	adds	r7, #40	; 0x28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800531e:	b580      	push	{r7, lr}
 8005320:	b08c      	sub	sp, #48	; 0x30
 8005322:	af04      	add	r7, sp, #16
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fd7e 	bl	8003e34 <pvPortMalloc>
 8005338:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005340:	20d4      	movs	r0, #212	; 0xd4
 8005342:	f7fe fd77 	bl	8003e34 <pvPortMalloc>
 8005346:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
 8005354:	e005      	b.n	8005362 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7fe fe3c 	bl	8003fd4 <vPortFree>
 800535c:	e001      	b.n	8005362 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d017      	beq.n	8005398 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	2300      	movs	r3, #0
 8005374:	9303      	str	r3, [sp, #12]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	9302      	str	r3, [sp, #8]
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f80e 	bl	80053a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800538c:	69f8      	ldr	r0, [r7, #28]
 800538e:	f000 f8b7 	bl	8005500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005392:	2301      	movs	r3, #1
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	e002      	b.n	800539e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
 800539c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800539e:	69bb      	ldr	r3, [r7, #24]
	}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	461a      	mov	r2, r3
 80053c0:	21a5      	movs	r1, #165	; 0xa5
 80053c2:	f001 fd97 	bl	8006ef4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053d0:	3b01      	subs	r3, #1
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f023 0307 	bic.w	r3, r3, #7
 80053de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <prvInitialiseNewTask+0x58>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	617b      	str	r3, [r7, #20]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01f      	beq.n	800544c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800540c:	2300      	movs	r3, #0
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e012      	b.n	8005438 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	7819      	ldrb	r1, [r3, #0]
 800541a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	3334      	adds	r3, #52	; 0x34
 8005422:	460a      	mov	r2, r1
 8005424:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b1f      	cmp	r3, #31
 800543c:	d9e9      	bls.n	8005412 <prvInitialiseNewTask+0x6a>
 800543e:	e000      	b.n	8005442 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005440:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800544a:	e003      	b.n	8005454 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	2b37      	cmp	r3, #55	; 0x37
 8005458:	d901      	bls.n	800545e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800545a:	2337      	movs	r3, #55	; 0x37
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005468:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2200      	movs	r2, #0
 800546e:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	3304      	adds	r3, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe feeb 	bl	8004250 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	3318      	adds	r3, #24
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fee6 	bl	8004250 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005488:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	2200      	movs	r2, #0
 800549e:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	336c      	adds	r3, #108	; 0x6c
 80054b4:	2260      	movs	r2, #96	; 0x60
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 fd1b 	bl	8006ef4 <memset>
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <prvInitialiseNewTask+0x14c>)
 80054c2:	671a      	str	r2, [r3, #112]	; 0x70
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	4a0c      	ldr	r2, [pc, #48]	; (80054f8 <prvInitialiseNewTask+0x150>)
 80054c8:	675a      	str	r2, [r3, #116]	; 0x74
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	4a0b      	ldr	r2, [pc, #44]	; (80054fc <prvInitialiseNewTask+0x154>)
 80054ce:	679a      	str	r2, [r3, #120]	; 0x78
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	69b8      	ldr	r0, [r7, #24]
 80054d6:	f7fe ff4f 	bl	8004378 <pxPortInitialiseStack>
 80054da:	4602      	mov	r2, r0
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ec:	bf00      	nop
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	08007ab0 	.word	0x08007ab0
 80054f8:	08007ad0 	.word	0x08007ad0
 80054fc:	08007a90 	.word	0x08007a90

08005500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005508:	f7ff f864 	bl	80045d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <prvAddNewTaskToReadyList+0xc4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	4a2c      	ldr	r2, [pc, #176]	; (80055c4 <prvAddNewTaskToReadyList+0xc4>)
 8005514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005516:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <prvAddNewTaskToReadyList+0xc8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <prvAddNewTaskToReadyList+0xc8>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <prvAddNewTaskToReadyList+0xc4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d110      	bne.n	800554e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800552c:	f000 fd3a 	bl	8005fa4 <prvInitialiseTaskLists>
 8005530:	e00d      	b.n	800554e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <prvAddNewTaskToReadyList+0xcc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800553a:	4b23      	ldr	r3, [pc, #140]	; (80055c8 <prvAddNewTaskToReadyList+0xc8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	429a      	cmp	r2, r3
 8005546:	d802      	bhi.n	800554e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <prvAddNewTaskToReadyList+0xc8>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <prvAddNewTaskToReadyList+0xd0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <prvAddNewTaskToReadyList+0xd0>)
 8005556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005558:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <prvAddNewTaskToReadyList+0xd0>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <prvAddNewTaskToReadyList+0xd4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d903      	bls.n	8005574 <prvAddNewTaskToReadyList+0x74>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <prvAddNewTaskToReadyList+0xd4>)
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <prvAddNewTaskToReadyList+0xd8>)
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f7fe fe6d 	bl	800426a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005590:	f7ff f850 	bl	8004634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <prvAddNewTaskToReadyList+0xcc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <prvAddNewTaskToReadyList+0xc8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d207      	bcs.n	80055ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <prvAddNewTaskToReadyList+0xdc>)
 80055ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	200032f0 	.word	0x200032f0
 80055c8:	20002e1c 	.word	0x20002e1c
 80055cc:	200032fc 	.word	0x200032fc
 80055d0:	2000330c 	.word	0x2000330c
 80055d4:	200032f8 	.word	0x200032f8
 80055d8:	20002e20 	.word	0x20002e20
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d017      	beq.n	8005622 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <vTaskDelay+0x60>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <vTaskDelay+0x30>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60bb      	str	r3, [r7, #8]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005610:	f000 f8f2 	bl	80057f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005614:	2100      	movs	r1, #0
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 ff90 	bl	800653c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800561c:	f000 f8fa 	bl	8005814 <xTaskResumeAll>
 8005620:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d107      	bne.n	8005638 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <vTaskDelay+0x64>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20003318 	.word	0x20003318
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <eTaskGetState+0x28>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005670:	4b23      	ldr	r3, [pc, #140]	; (8005700 <eTaskGetState+0xb8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	429a      	cmp	r2, r3
 8005678:	d102      	bne.n	8005680 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800567a:	2300      	movs	r3, #0
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e03a      	b.n	80056f6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8005680:	f7fe ffa8 	bl	80045d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <eTaskGetState+0xbc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005690:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <eTaskGetState+0xc0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005696:	f7fe ffcd 	bl	8004634 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d003      	beq.n	80056aa <eTaskGetState+0x62>
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d102      	bne.n	80056b0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80056aa:	2302      	movs	r3, #2
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e022      	b.n	80056f6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4a16      	ldr	r2, [pc, #88]	; (800570c <eTaskGetState+0xc4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d112      	bne.n	80056de <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d102      	bne.n	80056d2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80056cc:	2302      	movs	r3, #2
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e011      	b.n	80056f6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80056d2:	2303      	movs	r3, #3
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e00e      	b.n	80056f6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80056d8:	2302      	movs	r3, #2
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e00b      	b.n	80056f6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <eTaskGetState+0xc8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d002      	beq.n	80056ec <eTaskGetState+0xa4>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80056ec:	2304      	movs	r3, #4
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e001      	b.n	80056f6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80056f2:	2301      	movs	r3, #1
 80056f4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80056f6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20002e1c 	.word	0x20002e1c
 8005704:	200032a8 	.word	0x200032a8
 8005708:	200032ac 	.word	0x200032ac
 800570c:	200032dc 	.word	0x200032dc
 8005710:	200032c4 	.word	0x200032c4

08005714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005722:	463a      	mov	r2, r7
 8005724:	1d39      	adds	r1, r7, #4
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fb4e 	bl	8003dcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	9202      	str	r2, [sp, #8]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	2300      	movs	r3, #0
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	2300      	movs	r3, #0
 8005740:	460a      	mov	r2, r1
 8005742:	4925      	ldr	r1, [pc, #148]	; (80057d8 <vTaskStartScheduler+0xc4>)
 8005744:	4825      	ldr	r0, [pc, #148]	; (80057dc <vTaskStartScheduler+0xc8>)
 8005746:	f7ff fd8d 	bl	8005264 <xTaskCreateStatic>
 800574a:	4603      	mov	r3, r0
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <vTaskStartScheduler+0xcc>)
 800574e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005750:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <vTaskStartScheduler+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005758:	2301      	movs	r3, #1
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e001      	b.n	8005762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005768:	f000 ff3c 	bl	80065e4 <xTimerCreateTimerTask>
 800576c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d11d      	bne.n	80057b0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	613b      	str	r3, [r7, #16]
}
 8005786:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005788:	4b16      	ldr	r3, [pc, #88]	; (80057e4 <vTaskStartScheduler+0xd0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	336c      	adds	r3, #108	; 0x6c
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <vTaskStartScheduler+0xd4>)
 8005790:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <vTaskStartScheduler+0xd8>)
 8005794:	f04f 32ff 	mov.w	r2, #4294967295
 8005798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <vTaskStartScheduler+0xdc>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <vTaskStartScheduler+0xe0>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80057a6:	f7fa ff15 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057aa:	f7fe fe71 	bl	8004490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ae:	e00e      	b.n	80057ce <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d10a      	bne.n	80057ce <vTaskStartScheduler+0xba>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <vTaskStartScheduler+0xb8>
}
 80057ce:	bf00      	nop
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	0800797c 	.word	0x0800797c
 80057dc:	08005f75 	.word	0x08005f75
 80057e0:	20003314 	.word	0x20003314
 80057e4:	20002e1c 	.word	0x20002e1c
 80057e8:	2000007c 	.word	0x2000007c
 80057ec:	20003310 	.word	0x20003310
 80057f0:	200032fc 	.word	0x200032fc
 80057f4:	200032f4 	.word	0x200032f4

080057f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <vTaskSuspendAll+0x18>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a03      	ldr	r2, [pc, #12]	; (8005810 <vTaskSuspendAll+0x18>)
 8005804:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	20003318 	.word	0x20003318

08005814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005822:	4b42      	ldr	r3, [pc, #264]	; (800592c <xTaskResumeAll+0x118>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <xTaskResumeAll+0x2c>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005840:	f7fe fec8 	bl	80045d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005844:	4b39      	ldr	r3, [pc, #228]	; (800592c <xTaskResumeAll+0x118>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	4a38      	ldr	r2, [pc, #224]	; (800592c <xTaskResumeAll+0x118>)
 800584c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <xTaskResumeAll+0x118>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d162      	bne.n	800591c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <xTaskResumeAll+0x11c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d05e      	beq.n	800591c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800585e:	e02f      	b.n	80058c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005860:	4b34      	ldr	r3, [pc, #208]	; (8005934 <xTaskResumeAll+0x120>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3318      	adds	r3, #24
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe fd59 	bl	8004324 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fd54 	bl	8004324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <xTaskResumeAll+0x124>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d903      	bls.n	8005890 <xTaskResumeAll+0x7c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <xTaskResumeAll+0x124>)
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <xTaskResumeAll+0x128>)
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe fcdf 	bl	800426a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b23      	ldr	r3, [pc, #140]	; (8005940 <xTaskResumeAll+0x12c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <xTaskResumeAll+0x130>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <xTaskResumeAll+0x120>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1cb      	bne.n	8005860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ce:	f000 fcdf 	bl	8006290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <xTaskResumeAll+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d010      	beq.n	8005900 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058de:	f000 f8d7 	bl	8005a90 <xTaskIncrementTick>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <xTaskResumeAll+0x130>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f1      	bne.n	80058de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <xTaskResumeAll+0x134>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <xTaskResumeAll+0x130>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <xTaskResumeAll+0x138>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800591c:	f7fe fe8a 	bl	8004634 <vPortExitCritical>

	return xAlreadyYielded;
 8005920:	68bb      	ldr	r3, [r7, #8]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20003318 	.word	0x20003318
 8005930:	200032f0 	.word	0x200032f0
 8005934:	200032b0 	.word	0x200032b0
 8005938:	200032f8 	.word	0x200032f8
 800593c:	20002e20 	.word	0x20002e20
 8005940:	20002e1c 	.word	0x20002e1c
 8005944:	20003304 	.word	0x20003304
 8005948:	20003300 	.word	0x20003300
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <xTaskGetTickCount+0x1c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800595c:	687b      	ldr	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	200032f4 	.word	0x200032f4

08005970 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	2338      	movs	r3, #56	; 0x38
 8005982:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8005984:	f7ff ff38 	bl	80057f8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8005988:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <uxTaskGetSystemState+0x108>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	d36a      	bcc.n	8005a68 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3b01      	subs	r3, #1
 8005996:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	461a      	mov	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1898      	adds	r0, r3, r2
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4a32      	ldr	r2, [pc, #200]	; (8005a7c <uxTaskGetSystemState+0x10c>)
 80059b4:	4413      	add	r3, r2
 80059b6:	2201      	movs	r2, #1
 80059b8:	4619      	mov	r1, r3
 80059ba:	f000 fbc7 	bl	800614c <prvListTasksWithinSingleList>
 80059be:	4602      	mov	r2, r0
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4413      	add	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e2      	bne.n	8005992 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <uxTaskGetSystemState+0x110>)
 80059de:	6811      	ldr	r1, [r2, #0]
 80059e0:	2202      	movs	r2, #2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fbb2 	bl	800614c <prvListTasksWithinSingleList>
 80059e8:	4602      	mov	r2, r0
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	4a20      	ldr	r2, [pc, #128]	; (8005a84 <uxTaskGetSystemState+0x114>)
 8005a02:	6811      	ldr	r1, [r2, #0]
 8005a04:	2202      	movs	r2, #2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fba0 	bl	800614c <prvListTasksWithinSingleList>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	2204      	movs	r2, #4
 8005a26:	4918      	ldr	r1, [pc, #96]	; (8005a88 <uxTaskGetSystemState+0x118>)
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fb8f 	bl	800614c <prvListTasksWithinSingleList>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4413      	add	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	461a      	mov	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	2203      	movs	r2, #3
 8005a48:	4910      	ldr	r1, [pc, #64]	; (8005a8c <uxTaskGetSystemState+0x11c>)
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fb7e 	bl	800614c <prvListTasksWithinSingleList>
 8005a50:	4602      	mov	r2, r0
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4413      	add	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005a5e:	f7fa fdc0 	bl	80005e2 <getRunTimeCounterValue>
 8005a62:	4602      	mov	r2, r0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8005a68:	f7ff fed4 	bl	8005814 <xTaskResumeAll>

		return uxTask;
 8005a6c:	697b      	ldr	r3, [r7, #20]
	}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200032f0 	.word	0x200032f0
 8005a7c:	20002e20 	.word	0x20002e20
 8005a80:	200032a8 	.word	0x200032a8
 8005a84:	200032ac 	.word	0x200032ac
 8005a88:	200032c4 	.word	0x200032c4
 8005a8c:	200032dc 	.word	0x200032dc

08005a90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a9a:	4b4f      	ldr	r3, [pc, #316]	; (8005bd8 <xTaskIncrementTick+0x148>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f040 808f 	bne.w	8005bc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005aa4:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <xTaskIncrementTick+0x14c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aac:	4a4b      	ldr	r2, [pc, #300]	; (8005bdc <xTaskIncrementTick+0x14c>)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d120      	bne.n	8005afa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ab8:	4b49      	ldr	r3, [pc, #292]	; (8005be0 <xTaskIncrementTick+0x150>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	603b      	str	r3, [r7, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xTaskIncrementTick+0x46>
 8005ad8:	4b41      	ldr	r3, [pc, #260]	; (8005be0 <xTaskIncrementTick+0x150>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <xTaskIncrementTick+0x154>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3f      	ldr	r2, [pc, #252]	; (8005be0 <xTaskIncrementTick+0x150>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4a3f      	ldr	r2, [pc, #252]	; (8005be4 <xTaskIncrementTick+0x154>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b3e      	ldr	r3, [pc, #248]	; (8005be8 <xTaskIncrementTick+0x158>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a3d      	ldr	r2, [pc, #244]	; (8005be8 <xTaskIncrementTick+0x158>)
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	f000 fbcb 	bl	8006290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005afa:	4b3c      	ldr	r3, [pc, #240]	; (8005bec <xTaskIncrementTick+0x15c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d349      	bcc.n	8005b98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b04:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <xTaskIncrementTick+0x150>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0e:	4b37      	ldr	r3, [pc, #220]	; (8005bec <xTaskIncrementTick+0x15c>)
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	601a      	str	r2, [r3, #0]
					break;
 8005b16:	e03f      	b.n	8005b98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b18:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <xTaskIncrementTick+0x150>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d203      	bcs.n	8005b38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b30:	4a2e      	ldr	r2, [pc, #184]	; (8005bec <xTaskIncrementTick+0x15c>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b36:	e02f      	b.n	8005b98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fbf1 	bl	8004324 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fbe8 	bl	8004324 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <xTaskIncrementTick+0x160>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d903      	bls.n	8005b68 <xTaskIncrementTick+0xd8>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <xTaskIncrementTick+0x160>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <xTaskIncrementTick+0x164>)
 8005b76:	441a      	add	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe fb73 	bl	800426a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <xTaskIncrementTick+0x168>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d3b8      	bcc.n	8005b04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b92:	2301      	movs	r3, #1
 8005b94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b96:	e7b5      	b.n	8005b04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b98:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <xTaskIncrementTick+0x168>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4915      	ldr	r1, [pc, #84]	; (8005bf4 <xTaskIncrementTick+0x164>)
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d901      	bls.n	8005bb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <xTaskIncrementTick+0x16c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e004      	b.n	8005bcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskIncrementTick+0x170>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <xTaskIncrementTick+0x170>)
 8005bca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bcc:	697b      	ldr	r3, [r7, #20]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20003318 	.word	0x20003318
 8005bdc:	200032f4 	.word	0x200032f4
 8005be0:	200032a8 	.word	0x200032a8
 8005be4:	200032ac 	.word	0x200032ac
 8005be8:	20003308 	.word	0x20003308
 8005bec:	20003310 	.word	0x20003310
 8005bf0:	200032f8 	.word	0x200032f8
 8005bf4:	20002e20 	.word	0x20002e20
 8005bf8:	20002e1c 	.word	0x20002e1c
 8005bfc:	20003304 	.word	0x20003304
 8005c00:	20003300 	.word	0x20003300

08005c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c0a:	4b36      	ldr	r3, [pc, #216]	; (8005ce4 <vTaskSwitchContext+0xe0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c12:	4b35      	ldr	r3, [pc, #212]	; (8005ce8 <vTaskSwitchContext+0xe4>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c18:	e05f      	b.n	8005cda <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8005c1a:	4b33      	ldr	r3, [pc, #204]	; (8005ce8 <vTaskSwitchContext+0xe4>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005c20:	f7fa fcdf 	bl	80005e2 <getRunTimeCounterValue>
 8005c24:	4603      	mov	r3, r0
 8005c26:	4a31      	ldr	r2, [pc, #196]	; (8005cec <vTaskSwitchContext+0xe8>)
 8005c28:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005c2a:	4b30      	ldr	r3, [pc, #192]	; (8005cec <vTaskSwitchContext+0xe8>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <vTaskSwitchContext+0xec>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d909      	bls.n	8005c4a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005c36:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <vTaskSwitchContext+0xf0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005c3c:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <vTaskSwitchContext+0xe8>)
 8005c3e:	6810      	ldr	r0, [r2, #0]
 8005c40:	4a2b      	ldr	r2, [pc, #172]	; (8005cf0 <vTaskSwitchContext+0xec>)
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	1a82      	subs	r2, r0, r2
 8005c46:	440a      	add	r2, r1
 8005c48:	669a      	str	r2, [r3, #104]	; 0x68
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005c4a:	4b28      	ldr	r3, [pc, #160]	; (8005cec <vTaskSwitchContext+0xe8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a28      	ldr	r2, [pc, #160]	; (8005cf0 <vTaskSwitchContext+0xec>)
 8005c50:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <vTaskSwitchContext+0xf4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e010      	b.n	8005c7c <vTaskSwitchContext+0x78>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <vTaskSwitchContext+0x72>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	607b      	str	r3, [r7, #4]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <vTaskSwitchContext+0x70>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	491f      	ldr	r1, [pc, #124]	; (8005cfc <vTaskSwitchContext+0xf8>)
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0e4      	beq.n	8005c5a <vTaskSwitchContext+0x56>
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <vTaskSwitchContext+0xf8>)
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d104      	bne.n	8005cc0 <vTaskSwitchContext+0xbc>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	605a      	str	r2, [r3, #4]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	4a0b      	ldr	r2, [pc, #44]	; (8005cf4 <vTaskSwitchContext+0xf0>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <vTaskSwitchContext+0xf4>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <vTaskSwitchContext+0xf0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	336c      	adds	r3, #108	; 0x6c
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <vTaskSwitchContext+0xfc>)
 8005cd8:	6013      	str	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20003318 	.word	0x20003318
 8005ce8:	20003304 	.word	0x20003304
 8005cec:	20003320 	.word	0x20003320
 8005cf0:	2000331c 	.word	0x2000331c
 8005cf4:	20002e1c 	.word	0x20002e1c
 8005cf8:	200032f8 	.word	0x200032f8
 8005cfc:	20002e20 	.word	0x20002e20
 8005d00:	2000007c 	.word	0x2000007c

08005d04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <vTaskPlaceOnEventList+0x44>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3318      	adds	r3, #24
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fe fabd 	bl	80042b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d38:	2101      	movs	r1, #1
 8005d3a:	6838      	ldr	r0, [r7, #0]
 8005d3c:	f000 fbfe 	bl	800653c <prvAddCurrentTaskToDelayedList>
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20002e1c 	.word	0x20002e1c

08005d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	617b      	str	r3, [r7, #20]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3318      	adds	r3, #24
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7fe fa74 	bl	800426a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f000 fbd3 	bl	800653c <prvAddCurrentTaskToDelayedList>
	}
 8005d96:	bf00      	nop
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20002e1c 	.word	0x20002e1c

08005da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	60fb      	str	r3, [r7, #12]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe faa5 	bl	8004324 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dda:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <xTaskRemoveFromEventList+0xb0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d11d      	bne.n	8005e1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fa9c 	bl	8004324 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <xTaskRemoveFromEventList+0xb4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d903      	bls.n	8005e00 <xTaskRemoveFromEventList+0x5c>
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <xTaskRemoveFromEventList+0xb4>)
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <xTaskRemoveFromEventList+0xb8>)
 8005e0e:	441a      	add	r2, r3
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe fa27 	bl	800426a <vListInsertEnd>
 8005e1c:	e005      	b.n	8005e2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3318      	adds	r3, #24
 8005e22:	4619      	mov	r1, r3
 8005e24:	480e      	ldr	r0, [pc, #56]	; (8005e60 <xTaskRemoveFromEventList+0xbc>)
 8005e26:	f7fe fa20 	bl	800426a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <xTaskRemoveFromEventList+0xc0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d905      	bls.n	8005e44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <xTaskRemoveFromEventList+0xc4>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e001      	b.n	8005e48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20003318 	.word	0x20003318
 8005e58:	200032f8 	.word	0x200032f8
 8005e5c:	20002e20 	.word	0x20002e20
 8005e60:	200032b0 	.word	0x200032b0
 8005e64:	20002e1c 	.word	0x20002e1c
 8005e68:	20003304 	.word	0x20003304

08005e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <vTaskInternalSetTimeOutState+0x24>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <vTaskInternalSetTimeOutState+0x28>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	605a      	str	r2, [r3, #4]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20003308 	.word	0x20003308
 8005e94:	200032f4 	.word	0x200032f4

08005e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	613b      	str	r3, [r7, #16]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60fb      	str	r3, [r7, #12]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005eda:	f7fe fb7b 	bl	80045d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <xTaskCheckForTimeOut+0xbc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d102      	bne.n	8005efe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	e023      	b.n	8005f46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <xTaskCheckForTimeOut+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d007      	beq.n	8005f1a <xTaskCheckForTimeOut+0x82>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	e015      	b.n	8005f46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d20b      	bcs.n	8005f3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff9b 	bl	8005e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	e004      	b.n	8005f46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f7fe fb75 	bl	8004634 <vPortExitCritical>

	return xReturn;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200032f4 	.word	0x200032f4
 8005f58:	20003308 	.word	0x20003308

08005f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f60:	4b03      	ldr	r3, [pc, #12]	; (8005f70 <vTaskMissedYield+0x14>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20003304 	.word	0x20003304

08005f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f7c:	f000 f852 	bl	8006024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <prvIdleTask+0x28>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d9f9      	bls.n	8005f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <prvIdleTask+0x2c>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f98:	e7f0      	b.n	8005f7c <prvIdleTask+0x8>
 8005f9a:	bf00      	nop
 8005f9c:	20002e20 	.word	0x20002e20
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	e00c      	b.n	8005fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4a12      	ldr	r2, [pc, #72]	; (8006004 <prvInitialiseTaskLists+0x60>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe f926 	bl	8004210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b37      	cmp	r3, #55	; 0x37
 8005fce:	d9ef      	bls.n	8005fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd0:	480d      	ldr	r0, [pc, #52]	; (8006008 <prvInitialiseTaskLists+0x64>)
 8005fd2:	f7fe f91d 	bl	8004210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fd6:	480d      	ldr	r0, [pc, #52]	; (800600c <prvInitialiseTaskLists+0x68>)
 8005fd8:	f7fe f91a 	bl	8004210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <prvInitialiseTaskLists+0x6c>)
 8005fde:	f7fe f917 	bl	8004210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fe2:	480c      	ldr	r0, [pc, #48]	; (8006014 <prvInitialiseTaskLists+0x70>)
 8005fe4:	f7fe f914 	bl	8004210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fe8:	480b      	ldr	r0, [pc, #44]	; (8006018 <prvInitialiseTaskLists+0x74>)
 8005fea:	f7fe f911 	bl	8004210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <prvInitialiseTaskLists+0x78>)
 8005ff0:	4a05      	ldr	r2, [pc, #20]	; (8006008 <prvInitialiseTaskLists+0x64>)
 8005ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <prvInitialiseTaskLists+0x7c>)
 8005ff6:	4a05      	ldr	r2, [pc, #20]	; (800600c <prvInitialiseTaskLists+0x68>)
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20002e20 	.word	0x20002e20
 8006008:	20003280 	.word	0x20003280
 800600c:	20003294 	.word	0x20003294
 8006010:	200032b0 	.word	0x200032b0
 8006014:	200032c4 	.word	0x200032c4
 8006018:	200032dc 	.word	0x200032dc
 800601c:	200032a8 	.word	0x200032a8
 8006020:	200032ac 	.word	0x200032ac

08006024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602a:	e019      	b.n	8006060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800602c:	f7fe fad2 	bl	80045d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <prvCheckTasksWaitingTermination+0x50>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe f971 	bl	8004324 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006042:	4b0d      	ldr	r3, [pc, #52]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a0b      	ldr	r2, [pc, #44]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 800604a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <prvCheckTasksWaitingTermination+0x58>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	4a0a      	ldr	r2, [pc, #40]	; (800607c <prvCheckTasksWaitingTermination+0x58>)
 8006054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006056:	f7fe faed 	bl	8004634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f8e4 	bl	8006228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <prvCheckTasksWaitingTermination+0x58>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e1      	bne.n	800602c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200032c4 	.word	0x200032c4
 8006078:	200032f0 	.word	0x200032f0
 800607c:	200032d8 	.word	0x200032d8

08006080 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <vTaskGetInfo+0x1a>
 8006094:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <vTaskGetInfo+0xc8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	e000      	b.n	800609c <vTaskGetInfo+0x1c>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	2b05      	cmp	r3, #5
 80060da:	d01a      	beq.n	8006112 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <vTaskGetInfo+0xc8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d103      	bne.n	80060ee <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	731a      	strb	r2, [r3, #12]
 80060ec:	e018      	b.n	8006120 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d112      	bne.n	8006120 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 80060fa:	f7ff fb7d 	bl	80057f8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2202      	movs	r2, #2
 800610a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800610c:	f7ff fb82 	bl	8005814 <xTaskResumeAll>
 8006110:	e006      	b.n	8006120 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8006112:	6978      	ldr	r0, [r7, #20]
 8006114:	f7ff fa98 	bl	8005648 <eTaskGetState>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f860 	bl	80061f0 <prvTaskCheckFreeStackSpace>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8006138:	e002      	b.n	8006140 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	841a      	strh	r2, [r3, #32]
	}
 8006140:	bf00      	nop
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20002e1c 	.word	0x20002e1c

0800614c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d03f      	beq.n	80061e6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	623b      	str	r3, [r7, #32]
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	3308      	adds	r3, #8
 800617c:	429a      	cmp	r2, r3
 800617e:	d104      	bne.n	800618a <prvListTasksWithinSingleList+0x3e>
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3308      	adds	r3, #8
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d104      	bne.n	80061b6 <prvListTasksWithinSingleList+0x6a>
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80061be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	461a      	mov	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1899      	adds	r1, r3, r2
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2201      	movs	r2, #1
 80061d2:	6978      	ldr	r0, [r7, #20]
 80061d4:	f7ff ff54 	bl	8006080 <vTaskGetInfo>
				uxTask++;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	3301      	adds	r3, #1
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d1d5      	bne.n	8006192 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	; 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80061fc:	e005      	b.n	800620a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3301      	adds	r3, #1
 8006202:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2ba5      	cmp	r3, #165	; 0xa5
 8006210:	d0f5      	beq.n	80061fe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	089b      	lsrs	r3, r3, #2
 8006216:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	b29b      	uxth	r3, r3
	}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	336c      	adds	r3, #108	; 0x6c
 8006234:	4618      	mov	r0, r3
 8006236:	f000 ff07 	bl	8007048 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	4618      	mov	r0, r3
 800624a:	f7fd fec3 	bl	8003fd4 <vPortFree>
				vPortFree( pxTCB );
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fd fec0 	bl	8003fd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006254:	e018      	b.n	8006288 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800625c:	2b01      	cmp	r3, #1
 800625e:	d103      	bne.n	8006268 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fd feb7 	bl	8003fd4 <vPortFree>
	}
 8006266:	e00f      	b.n	8006288 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800626e:	2b02      	cmp	r3, #2
 8006270:	d00a      	beq.n	8006288 <prvDeleteTCB+0x60>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60fb      	str	r3, [r7, #12]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <prvDeleteTCB+0x5e>
	}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvResetNextTaskUnblockTime+0x38>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <prvResetNextTaskUnblockTime+0x3c>)
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062a8:	e008      	b.n	80062bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062aa:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <prvResetNextTaskUnblockTime+0x38>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <prvResetNextTaskUnblockTime+0x3c>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	200032a8 	.word	0x200032a8
 80062cc:	20003310 	.word	0x20003310

080062d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <xTaskGetSchedulerState+0x34>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062de:	2301      	movs	r3, #1
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	e008      	b.n	80062f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <xTaskGetSchedulerState+0x38>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062ec:	2302      	movs	r3, #2
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	e001      	b.n	80062f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062f6:	687b      	ldr	r3, [r7, #4]
	}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200032fc 	.word	0x200032fc
 8006308:	20003318 	.word	0x20003318

0800630c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d056      	beq.n	80063d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006322:	4b2e      	ldr	r3, [pc, #184]	; (80063dc <xTaskPriorityDisinherit+0xd0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	429a      	cmp	r2, r3
 800632a:	d00a      	beq.n	8006342 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60fb      	str	r3, [r7, #12]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60bb      	str	r3, [r7, #8]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006372:	429a      	cmp	r2, r3
 8006374:	d02c      	beq.n	80063d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800637a:	2b00      	cmp	r3, #0
 800637c:	d128      	bne.n	80063d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3304      	adds	r3, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7fd ffce 	bl	8004324 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <xTaskPriorityDisinherit+0xd4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d903      	bls.n	80063b0 <xTaskPriorityDisinherit+0xa4>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <xTaskPriorityDisinherit+0xd4>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <xTaskPriorityDisinherit+0xd8>)
 80063be:	441a      	add	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fd ff4f 	bl	800426a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063d0:	697b      	ldr	r3, [r7, #20]
	}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20002e1c 	.word	0x20002e1c
 80063e0:	200032f8 	.word	0x200032f8
 80063e4:	20002e20 	.word	0x20002e20

080063e8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fee7 	bl	80071c8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7f9 ff10 	bl	8000220 <strlen>
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	e007      	b.n	8006414 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	2220      	movs	r2, #32
 800640c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b1e      	cmp	r3, #30
 8006418:	d9f4      	bls.n	8006404 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
	}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8006442:	4b3a      	ldr	r3, [pc, #232]	; (800652c <vTaskGetRunTimeStats+0xf8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8006448:	4b38      	ldr	r3, [pc, #224]	; (800652c <vTaskGetRunTimeStats+0xf8>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4618      	mov	r0, r3
 8006456:	f7fd fced 	bl	8003e34 <pvPortMalloc>
 800645a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d05f      	beq.n	8006522 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8006462:	f107 030c 	add.w	r3, r7, #12
 8006466:	461a      	mov	r2, r3
 8006468:	69b9      	ldr	r1, [r7, #24]
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff fa80 	bl	8005970 <uxTaskGetSystemState>
 8006470:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4a2e      	ldr	r2, [pc, #184]	; (8006530 <vTaskGetRunTimeStats+0xfc>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d04b      	beq.n	800651c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e044      	b.n	8006514 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	461a      	mov	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	4613      	mov	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	461a      	mov	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4413      	add	r3, r2
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff95 	bl	80063e8 <prvWriteNameToBuffer>
 80064be:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	4613      	mov	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	461a      	mov	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4916      	ldr	r1, [pc, #88]	; (8006534 <vTaskGetRunTimeStats+0x100>)
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fe53 	bl	8007188 <siprintf>
 80064e2:	e00d      	b.n	8006500 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	461a      	mov	r2, r3
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	4413      	add	r3, r2
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	461a      	mov	r2, r3
 80064f8:	490f      	ldr	r1, [pc, #60]	; (8006538 <vTaskGetRunTimeStats+0x104>)
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fe44 	bl	8007188 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7f9 fe8d 	bl	8000220 <strlen>
 8006506:	4602      	mov	r2, r0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3301      	adds	r3, #1
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	429a      	cmp	r2, r3
 800651a:	d3b6      	bcc.n	800648a <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800651c:	6978      	ldr	r0, [r7, #20]
 800651e:	f7fd fd59 	bl	8003fd4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006522:	bf00      	nop
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	200032f0 	.word	0x200032f0
 8006530:	51eb851f 	.word	0x51eb851f
 8006534:	08007994 	.word	0x08007994
 8006538:	080079a0 	.word	0x080079a0

0800653c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006546:	4b21      	ldr	r3, [pc, #132]	; (80065cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fd fee6 	bl	8004324 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d10a      	bne.n	8006576 <prvAddCurrentTaskToDelayedList+0x3a>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4819      	ldr	r0, [pc, #100]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006570:	f7fd fe7b 	bl	800426a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006574:	e026      	b.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	429a      	cmp	r2, r3
 800658c:	d209      	bcs.n	80065a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f7fd fe89 	bl	80042b2 <vListInsert>
}
 80065a0:	e010      	b.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fd fe7f 	bl	80042b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d202      	bcs.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065be:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200032f4 	.word	0x200032f4
 80065d0:	20002e1c 	.word	0x20002e1c
 80065d4:	200032dc 	.word	0x200032dc
 80065d8:	200032ac 	.word	0x200032ac
 80065dc:	200032a8 	.word	0x200032a8
 80065e0:	20003310 	.word	0x20003310

080065e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065ee:	f000 fbbd 	bl	8006d6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xTimerCreateTimerTask+0x80>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d021      	beq.n	800663e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006602:	1d3a      	adds	r2, r7, #4
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd fbf7 	bl	8003e00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	9202      	str	r2, [sp, #8]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	2302      	movs	r3, #2
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2300      	movs	r3, #0
 8006622:	460a      	mov	r2, r1
 8006624:	4910      	ldr	r1, [pc, #64]	; (8006668 <xTimerCreateTimerTask+0x84>)
 8006626:	4811      	ldr	r0, [pc, #68]	; (800666c <xTimerCreateTimerTask+0x88>)
 8006628:	f7fe fe1c 	bl	8005264 <xTaskCreateStatic>
 800662c:	4603      	mov	r3, r0
 800662e:	4a10      	ldr	r2, [pc, #64]	; (8006670 <xTimerCreateTimerTask+0x8c>)
 8006630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <xTimerCreateTimerTask+0x8c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800663a:	2301      	movs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800665a:	697b      	ldr	r3, [r7, #20]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20003354 	.word	0x20003354
 8006668:	080079ac 	.word	0x080079ac
 800666c:	08006915 	.word	0x08006915
 8006670:	20003358 	.word	0x20003358

08006674 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006682:	202c      	movs	r0, #44	; 0x2c
 8006684:	f7fd fbd6 	bl	8003e34 <pvPortMalloc>
 8006688:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00d      	beq.n	80066ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f843 	bl	8006732 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80066ac:	697b      	ldr	r3, [r7, #20]
	}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08a      	sub	sp, #40	; 0x28
 80066ba:	af02      	add	r7, sp, #8
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80066c4:	232c      	movs	r3, #44	; 0x2c
 80066c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b2c      	cmp	r3, #44	; 0x2c
 80066cc:	d00a      	beq.n	80066e4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	61bb      	str	r3, [r7, #24]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xTimerCreateStatic+0x4c>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	617b      	str	r3, [r7, #20]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f805 	bl	8006732 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006728:	69fb      	ldr	r3, [r7, #28]
	}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	617b      	str	r3, [r7, #20]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01e      	beq.n	80067a0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006762:	f000 fb03 	bl	8006d6c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	3304      	adds	r3, #4
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd fd64 	bl	8004250 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006794:	f043 0304 	orr.w	r3, r3, #4
 8006798:	b2da      	uxtb	r2, r3
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80067a0:	bf00      	nop
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067d6:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <xTimerGenericCommand+0x98>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02a      	beq.n	8006834 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b05      	cmp	r3, #5
 80067ee:	dc18      	bgt.n	8006822 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067f0:	f7ff fd6e 	bl	80062d0 <xTaskGetSchedulerState>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d109      	bne.n	800680e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067fa:	4b11      	ldr	r3, [pc, #68]	; (8006840 <xTimerGenericCommand+0x98>)
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	f107 0110 	add.w	r1, r7, #16
 8006802:	2300      	movs	r3, #0
 8006804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006806:	f7fe f945 	bl	8004a94 <xQueueGenericSend>
 800680a:	6278      	str	r0, [r7, #36]	; 0x24
 800680c:	e012      	b.n	8006834 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <xTimerGenericCommand+0x98>)
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f107 0110 	add.w	r1, r7, #16
 8006816:	2300      	movs	r3, #0
 8006818:	2200      	movs	r2, #0
 800681a:	f7fe f93b 	bl	8004a94 <xQueueGenericSend>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24
 8006820:	e008      	b.n	8006834 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <xTimerGenericCommand+0x98>)
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	f107 0110 	add.w	r1, r7, #16
 800682a:	2300      	movs	r3, #0
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	f7fe fa2f 	bl	8004c90 <xQueueGenericSendFromISR>
 8006832:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20003354 	.word	0x20003354

08006844 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <xTimerGetPeriod+0x28>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	699b      	ldr	r3, [r3, #24]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <prvProcessExpiredTimer+0x94>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	3304      	adds	r3, #4
 8006894:	4618      	mov	r0, r3
 8006896:	f7fd fd45 	bl	8004324 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d022      	beq.n	80068ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	18d1      	adds	r1, r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	6978      	ldr	r0, [r7, #20]
 80068b6:	f000 f8d1 	bl	8006a5c <prvInsertTimerInActiveList>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01f      	beq.n	8006900 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	2100      	movs	r1, #0
 80068ca:	6978      	ldr	r0, [r7, #20]
 80068cc:	f7ff ff6c 	bl	80067a8 <xTimerGenericCommand>
 80068d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d113      	bne.n	8006900 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	60fb      	str	r3, [r7, #12]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	6978      	ldr	r0, [r7, #20]
 8006906:	4798      	blx	r3
}
 8006908:	bf00      	nop
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	2000334c 	.word	0x2000334c

08006914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800691c:	f107 0308 	add.w	r3, r7, #8
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f857 	bl	80069d4 <prvGetNextExpireTime>
 8006926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4619      	mov	r1, r3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f803 	bl	8006938 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006932:	f000 f8d5 	bl	8006ae0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006936:	e7f1      	b.n	800691c <prvTimerTask+0x8>

08006938 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006942:	f7fe ff59 	bl	80057f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f866 	bl	8006a1c <prvSampleTimeNow>
 8006950:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d130      	bne.n	80069ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <prvProcessTimerOrBlockTask+0x3c>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	429a      	cmp	r2, r3
 8006964:	d806      	bhi.n	8006974 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006966:	f7fe ff55 	bl	8005814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff85 	bl	800687c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006972:	e024      	b.n	80069be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <prvProcessTimerOrBlockTask+0x90>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <prvProcessTimerOrBlockTask+0x50>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <prvProcessTimerOrBlockTask+0x52>
 8006988:	2300      	movs	r3, #0
 800698a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800698c:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <prvProcessTimerOrBlockTask+0x94>)
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	f7fe fc2f 	bl	80051fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800699e:	f7fe ff39 	bl	8005814 <xTaskResumeAll>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <prvProcessTimerOrBlockTask+0x98>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
}
 80069b8:	e001      	b.n	80069be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069ba:	f7fe ff2b 	bl	8005814 <xTaskResumeAll>
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20003350 	.word	0x20003350
 80069cc:	20003354 	.word	0x20003354
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <prvGetNextExpireTime+0x44>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <prvGetNextExpireTime+0x16>
 80069e6:	2201      	movs	r2, #1
 80069e8:	e000      	b.n	80069ec <prvGetNextExpireTime+0x18>
 80069ea:	2200      	movs	r2, #0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <prvGetNextExpireTime+0x44>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e001      	b.n	8006a08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	2000334c 	.word	0x2000334c

08006a1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a24:	f7fe ff94 	bl	8005950 <xTaskGetTickCount>
 8006a28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <prvSampleTimeNow+0x3c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d205      	bcs.n	8006a40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a34:	f000 f936 	bl	8006ca4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a46:	4a04      	ldr	r2, [pc, #16]	; (8006a58 <prvSampleTimeNow+0x3c>)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	2000335c 	.word	0x2000335c

08006a5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d812      	bhi.n	8006aa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	1ad2      	subs	r2, r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e01b      	b.n	8006ace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <prvInsertTimerInActiveList+0x7c>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7fd fc06 	bl	80042b2 <vListInsert>
 8006aa6:	e012      	b.n	8006ace <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d206      	bcs.n	8006abe <prvInsertTimerInActiveList+0x62>
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d302      	bcc.n	8006abe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e007      	b.n	8006ace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006abe:	4b07      	ldr	r3, [pc, #28]	; (8006adc <prvInsertTimerInActiveList+0x80>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fd fbf2 	bl	80042b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ace:	697b      	ldr	r3, [r7, #20]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20003350 	.word	0x20003350
 8006adc:	2000334c 	.word	0x2000334c

08006ae0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08e      	sub	sp, #56	; 0x38
 8006ae4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ae6:	e0ca      	b.n	8006c7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da18      	bge.n	8006b20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aee:	1d3b      	adds	r3, r7, #4
 8006af0:	3304      	adds	r3, #4
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	61fb      	str	r3, [r7, #28]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b16:	6850      	ldr	r0, [r2, #4]
 8006b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1a:	6892      	ldr	r2, [r2, #8]
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f2c0 80aa 	blt.w	8006c7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	3304      	adds	r3, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fd fbf3 	bl	8004324 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b3e:	463b      	mov	r3, r7
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff ff6b 	bl	8006a1c <prvSampleTimeNow>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b09      	cmp	r3, #9
 8006b4c:	f200 8097 	bhi.w	8006c7e <prvProcessReceivedCommands+0x19e>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <prvProcessReceivedCommands+0x78>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b81 	.word	0x08006b81
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006c09 	.word	0x08006c09
 8006b6c:	08006c53 	.word	0x08006c53
 8006b70:	08006b81 	.word	0x08006b81
 8006b74:	08006b81 	.word	0x08006b81
 8006b78:	08006bf5 	.word	0x08006bf5
 8006b7c:	08006c09 	.word	0x08006c09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	18d1      	adds	r1, r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba0:	f7ff ff5c 	bl	8006a5c <prvInsertTimerInActiveList>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d069      	beq.n	8006c7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d05e      	beq.n	8006c7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	441a      	add	r2, r3
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2100      	movs	r1, #0
 8006bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd2:	f7ff fde9 	bl	80067a8 <xTimerGenericCommand>
 8006bd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d14f      	bne.n	8006c7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	61bb      	str	r3, [r7, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c06:	e03a      	b.n	8006c7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	617b      	str	r3, [r7, #20]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	18d1      	adds	r1, r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4c:	f7ff ff06 	bl	8006a5c <prvInsertTimerInActiveList>
					break;
 8006c50:	e015      	b.n	8006c7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c62:	f7fd f9b7 	bl	8003fd4 <vPortFree>
 8006c66:	e00a      	b.n	8006c7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c6e:	f023 0301 	bic.w	r3, r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c7a:	e000      	b.n	8006c7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <prvProcessReceivedCommands+0x1c0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	1d39      	adds	r1, r7, #4
 8006c84:	2200      	movs	r2, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe f89e 	bl	8004dc8 <xQueueReceive>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f47f af2a 	bne.w	8006ae8 <prvProcessReceivedCommands+0x8>
	}
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3730      	adds	r7, #48	; 0x30
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20003354 	.word	0x20003354

08006ca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006caa:	e048      	b.n	8006d3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cac:	4b2d      	ldr	r3, [pc, #180]	; (8006d64 <prvSwitchTimerLists+0xc0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb6:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <prvSwitchTimerLists+0xc0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd fb2d 	bl	8004324 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d02e      	beq.n	8006d3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d90e      	bls.n	8006d10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cfe:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <prvSwitchTimerLists+0xc0>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fd fad2 	bl	80042b2 <vListInsert>
 8006d0e:	e016      	b.n	8006d3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d10:	2300      	movs	r3, #0
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fd44 	bl	80067a8 <xTimerGenericCommand>
 8006d20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	603b      	str	r3, [r7, #0]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <prvSwitchTimerLists+0xc0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1b1      	bne.n	8006cac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d48:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <prvSwitchTimerLists+0xc0>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <prvSwitchTimerLists+0xc4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <prvSwitchTimerLists+0xc0>)
 8006d54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d56:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <prvSwitchTimerLists+0xc4>)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6013      	str	r3, [r2, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	2000334c 	.word	0x2000334c
 8006d68:	20003350 	.word	0x20003350

08006d6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d72:	f7fd fc2f 	bl	80045d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d76:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <prvCheckForValidListAndQueue+0x60>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d120      	bne.n	8006dc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d7e:	4814      	ldr	r0, [pc, #80]	; (8006dd0 <prvCheckForValidListAndQueue+0x64>)
 8006d80:	f7fd fa46 	bl	8004210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d84:	4813      	ldr	r0, [pc, #76]	; (8006dd4 <prvCheckForValidListAndQueue+0x68>)
 8006d86:	f7fd fa43 	bl	8004210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d8a:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <prvCheckForValidListAndQueue+0x6c>)
 8006d8c:	4a10      	ldr	r2, [pc, #64]	; (8006dd0 <prvCheckForValidListAndQueue+0x64>)
 8006d8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d90:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <prvCheckForValidListAndQueue+0x70>)
 8006d92:	4a10      	ldr	r2, [pc, #64]	; (8006dd4 <prvCheckForValidListAndQueue+0x68>)
 8006d94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d96:	2300      	movs	r3, #0
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <prvCheckForValidListAndQueue+0x74>)
 8006d9c:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <prvCheckForValidListAndQueue+0x78>)
 8006d9e:	2110      	movs	r1, #16
 8006da0:	200a      	movs	r0, #10
 8006da2:	f7fd fda1 	bl	80048e8 <xQueueGenericCreateStatic>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4a08      	ldr	r2, [pc, #32]	; (8006dcc <prvCheckForValidListAndQueue+0x60>)
 8006daa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006dac:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <prvCheckForValidListAndQueue+0x60>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <prvCheckForValidListAndQueue+0x60>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	490b      	ldr	r1, [pc, #44]	; (8006de8 <prvCheckForValidListAndQueue+0x7c>)
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe f9f4 	bl	80051a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dc0:	f7fd fc38 	bl	8004634 <vPortExitCritical>
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20003354 	.word	0x20003354
 8006dd0:	20003324 	.word	0x20003324
 8006dd4:	20003338 	.word	0x20003338
 8006dd8:	2000334c 	.word	0x2000334c
 8006ddc:	20003350 	.word	0x20003350
 8006de0:	20003400 	.word	0x20003400
 8006de4:	20003360 	.word	0x20003360
 8006de8:	080079b4 	.word	0x080079b4

08006dec <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <xTimerIsTimerActive+0x28>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	60fb      	str	r3, [r7, #12]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8006e14:	f7fd fbde 	bl	80045d4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e001      	b.n	8006e30 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006e30:	f7fd fc00 	bl	8004634 <vPortExitCritical>

	return xReturn;
 8006e34:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006e66:	f7fd fbb5 	bl	80045d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006e70:	f7fd fbe0 	bl	8004634 <vPortExitCritical>

	return pvReturn;
 8006e74:	693b      	ldr	r3, [r7, #16]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	2000007c 	.word	0x2000007c

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 fd34 	bl	800790c <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08007b2c 	.word	0x08007b2c
 8006ec8:	08007b2c 	.word	0x08007b2c
 8006ecc:	08007b2c 	.word	0x08007b2c
 8006ed0:	08007b30 	.word	0x08007b30

08006ed4 <__retarget_lock_acquire_recursive>:
 8006ed4:	4770      	bx	lr

08006ed6 <__retarget_lock_release_recursive>:
 8006ed6:	4770      	bx	lr

08006ed8 <memcpy>:
 8006ed8:	440a      	add	r2, r1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	4770      	bx	lr
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	d1f9      	bne.n	8006ee6 <memcpy+0xe>
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <sbrk_aligned>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4e0e      	ldr	r6, [pc, #56]	; (8006f40 <sbrk_aligned+0x3c>)
 8006f08:	460c      	mov	r4, r1
 8006f0a:	6831      	ldr	r1, [r6, #0]
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	b911      	cbnz	r1, 8006f16 <sbrk_aligned+0x12>
 8006f10:	f000 f8f6 	bl	8007100 <_sbrk_r>
 8006f14:	6030      	str	r0, [r6, #0]
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f8f1 	bl	8007100 <_sbrk_r>
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	d00a      	beq.n	8006f38 <sbrk_aligned+0x34>
 8006f22:	1cc4      	adds	r4, r0, #3
 8006f24:	f024 0403 	bic.w	r4, r4, #3
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d007      	beq.n	8006f3c <sbrk_aligned+0x38>
 8006f2c:	1a21      	subs	r1, r4, r0
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 f8e6 	bl	8007100 <_sbrk_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d101      	bne.n	8006f3c <sbrk_aligned+0x38>
 8006f38:	f04f 34ff 	mov.w	r4, #4294967295
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	20003458 	.word	0x20003458

08006f44 <_malloc_r>:
 8006f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f48:	1ccd      	adds	r5, r1, #3
 8006f4a:	f025 0503 	bic.w	r5, r5, #3
 8006f4e:	3508      	adds	r5, #8
 8006f50:	2d0c      	cmp	r5, #12
 8006f52:	bf38      	it	cc
 8006f54:	250c      	movcc	r5, #12
 8006f56:	2d00      	cmp	r5, #0
 8006f58:	4607      	mov	r7, r0
 8006f5a:	db01      	blt.n	8006f60 <_malloc_r+0x1c>
 8006f5c:	42a9      	cmp	r1, r5
 8006f5e:	d905      	bls.n	8006f6c <_malloc_r+0x28>
 8006f60:	230c      	movs	r3, #12
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	2600      	movs	r6, #0
 8006f66:	4630      	mov	r0, r6
 8006f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f6c:	4e2e      	ldr	r6, [pc, #184]	; (8007028 <_malloc_r+0xe4>)
 8006f6e:	f000 f933 	bl	80071d8 <__malloc_lock>
 8006f72:	6833      	ldr	r3, [r6, #0]
 8006f74:	461c      	mov	r4, r3
 8006f76:	bb34      	cbnz	r4, 8006fc6 <_malloc_r+0x82>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f7ff ffc2 	bl	8006f04 <sbrk_aligned>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	4604      	mov	r4, r0
 8006f84:	d14d      	bne.n	8007022 <_malloc_r+0xde>
 8006f86:	6834      	ldr	r4, [r6, #0]
 8006f88:	4626      	mov	r6, r4
 8006f8a:	2e00      	cmp	r6, #0
 8006f8c:	d140      	bne.n	8007010 <_malloc_r+0xcc>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	4631      	mov	r1, r6
 8006f92:	4638      	mov	r0, r7
 8006f94:	eb04 0803 	add.w	r8, r4, r3
 8006f98:	f000 f8b2 	bl	8007100 <_sbrk_r>
 8006f9c:	4580      	cmp	r8, r0
 8006f9e:	d13a      	bne.n	8007016 <_malloc_r+0xd2>
 8006fa0:	6821      	ldr	r1, [r4, #0]
 8006fa2:	3503      	adds	r5, #3
 8006fa4:	1a6d      	subs	r5, r5, r1
 8006fa6:	f025 0503 	bic.w	r5, r5, #3
 8006faa:	3508      	adds	r5, #8
 8006fac:	2d0c      	cmp	r5, #12
 8006fae:	bf38      	it	cc
 8006fb0:	250c      	movcc	r5, #12
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff ffa5 	bl	8006f04 <sbrk_aligned>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d02b      	beq.n	8007016 <_malloc_r+0xd2>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	442b      	add	r3, r5
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	e00e      	b.n	8006fe4 <_malloc_r+0xa0>
 8006fc6:	6822      	ldr	r2, [r4, #0]
 8006fc8:	1b52      	subs	r2, r2, r5
 8006fca:	d41e      	bmi.n	800700a <_malloc_r+0xc6>
 8006fcc:	2a0b      	cmp	r2, #11
 8006fce:	d916      	bls.n	8006ffe <_malloc_r+0xba>
 8006fd0:	1961      	adds	r1, r4, r5
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	6025      	str	r5, [r4, #0]
 8006fd6:	bf18      	it	ne
 8006fd8:	6059      	strne	r1, [r3, #4]
 8006fda:	6863      	ldr	r3, [r4, #4]
 8006fdc:	bf08      	it	eq
 8006fde:	6031      	streq	r1, [r6, #0]
 8006fe0:	5162      	str	r2, [r4, r5]
 8006fe2:	604b      	str	r3, [r1, #4]
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f104 060b 	add.w	r6, r4, #11
 8006fea:	f000 f8fb 	bl	80071e4 <__malloc_unlock>
 8006fee:	f026 0607 	bic.w	r6, r6, #7
 8006ff2:	1d23      	adds	r3, r4, #4
 8006ff4:	1af2      	subs	r2, r6, r3
 8006ff6:	d0b6      	beq.n	8006f66 <_malloc_r+0x22>
 8006ff8:	1b9b      	subs	r3, r3, r6
 8006ffa:	50a3      	str	r3, [r4, r2]
 8006ffc:	e7b3      	b.n	8006f66 <_malloc_r+0x22>
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	42a3      	cmp	r3, r4
 8007002:	bf0c      	ite	eq
 8007004:	6032      	streq	r2, [r6, #0]
 8007006:	605a      	strne	r2, [r3, #4]
 8007008:	e7ec      	b.n	8006fe4 <_malloc_r+0xa0>
 800700a:	4623      	mov	r3, r4
 800700c:	6864      	ldr	r4, [r4, #4]
 800700e:	e7b2      	b.n	8006f76 <_malloc_r+0x32>
 8007010:	4634      	mov	r4, r6
 8007012:	6876      	ldr	r6, [r6, #4]
 8007014:	e7b9      	b.n	8006f8a <_malloc_r+0x46>
 8007016:	230c      	movs	r3, #12
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	4638      	mov	r0, r7
 800701c:	f000 f8e2 	bl	80071e4 <__malloc_unlock>
 8007020:	e7a1      	b.n	8006f66 <_malloc_r+0x22>
 8007022:	6025      	str	r5, [r4, #0]
 8007024:	e7de      	b.n	8006fe4 <_malloc_r+0xa0>
 8007026:	bf00      	nop
 8007028:	20003454 	.word	0x20003454

0800702c <cleanup_glue>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	460c      	mov	r4, r1
 8007030:	6809      	ldr	r1, [r1, #0]
 8007032:	4605      	mov	r5, r0
 8007034:	b109      	cbz	r1, 800703a <cleanup_glue+0xe>
 8007036:	f7ff fff9 	bl	800702c <cleanup_glue>
 800703a:	4621      	mov	r1, r4
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007042:	f000 b8d5 	b.w	80071f0 <_free_r>
	...

08007048 <_reclaim_reent>:
 8007048:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <_reclaim_reent+0xb4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4283      	cmp	r3, r0
 800704e:	b570      	push	{r4, r5, r6, lr}
 8007050:	4604      	mov	r4, r0
 8007052:	d051      	beq.n	80070f8 <_reclaim_reent+0xb0>
 8007054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007056:	b143      	cbz	r3, 800706a <_reclaim_reent+0x22>
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d14a      	bne.n	80070f4 <_reclaim_reent+0xac>
 800705e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	b111      	cbz	r1, 800706a <_reclaim_reent+0x22>
 8007064:	4620      	mov	r0, r4
 8007066:	f000 f8c3 	bl	80071f0 <_free_r>
 800706a:	6961      	ldr	r1, [r4, #20]
 800706c:	b111      	cbz	r1, 8007074 <_reclaim_reent+0x2c>
 800706e:	4620      	mov	r0, r4
 8007070:	f000 f8be 	bl	80071f0 <_free_r>
 8007074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007076:	b111      	cbz	r1, 800707e <_reclaim_reent+0x36>
 8007078:	4620      	mov	r0, r4
 800707a:	f000 f8b9 	bl	80071f0 <_free_r>
 800707e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007080:	b111      	cbz	r1, 8007088 <_reclaim_reent+0x40>
 8007082:	4620      	mov	r0, r4
 8007084:	f000 f8b4 	bl	80071f0 <_free_r>
 8007088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800708a:	b111      	cbz	r1, 8007092 <_reclaim_reent+0x4a>
 800708c:	4620      	mov	r0, r4
 800708e:	f000 f8af 	bl	80071f0 <_free_r>
 8007092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007094:	b111      	cbz	r1, 800709c <_reclaim_reent+0x54>
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f8aa 	bl	80071f0 <_free_r>
 800709c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800709e:	b111      	cbz	r1, 80070a6 <_reclaim_reent+0x5e>
 80070a0:	4620      	mov	r0, r4
 80070a2:	f000 f8a5 	bl	80071f0 <_free_r>
 80070a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80070a8:	b111      	cbz	r1, 80070b0 <_reclaim_reent+0x68>
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 f8a0 	bl	80071f0 <_free_r>
 80070b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b2:	b111      	cbz	r1, 80070ba <_reclaim_reent+0x72>
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 f89b 	bl	80071f0 <_free_r>
 80070ba:	69a3      	ldr	r3, [r4, #24]
 80070bc:	b1e3      	cbz	r3, 80070f8 <_reclaim_reent+0xb0>
 80070be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070c0:	4620      	mov	r0, r4
 80070c2:	4798      	blx	r3
 80070c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80070c6:	b1b9      	cbz	r1, 80070f8 <_reclaim_reent+0xb0>
 80070c8:	4620      	mov	r0, r4
 80070ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070ce:	f7ff bfad 	b.w	800702c <cleanup_glue>
 80070d2:	5949      	ldr	r1, [r1, r5]
 80070d4:	b941      	cbnz	r1, 80070e8 <_reclaim_reent+0xa0>
 80070d6:	3504      	adds	r5, #4
 80070d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070da:	2d80      	cmp	r5, #128	; 0x80
 80070dc:	68d9      	ldr	r1, [r3, #12]
 80070de:	d1f8      	bne.n	80070d2 <_reclaim_reent+0x8a>
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 f885 	bl	80071f0 <_free_r>
 80070e6:	e7ba      	b.n	800705e <_reclaim_reent+0x16>
 80070e8:	680e      	ldr	r6, [r1, #0]
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 f880 	bl	80071f0 <_free_r>
 80070f0:	4631      	mov	r1, r6
 80070f2:	e7ef      	b.n	80070d4 <_reclaim_reent+0x8c>
 80070f4:	2500      	movs	r5, #0
 80070f6:	e7ef      	b.n	80070d8 <_reclaim_reent+0x90>
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	bf00      	nop
 80070fc:	2000007c 	.word	0x2000007c

08007100 <_sbrk_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	; (800711c <_sbrk_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7f9 fd5a 	bl	8000bc4 <_sbrk>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_sbrk_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_sbrk_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	2000345c 	.word	0x2000345c

08007120 <sniprintf>:
 8007120:	b40c      	push	{r2, r3}
 8007122:	b530      	push	{r4, r5, lr}
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <sniprintf+0x64>)
 8007126:	1e0c      	subs	r4, r1, #0
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	b09d      	sub	sp, #116	; 0x74
 800712c:	da08      	bge.n	8007140 <sniprintf+0x20>
 800712e:	238b      	movs	r3, #139	; 0x8b
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	b01d      	add	sp, #116	; 0x74
 8007138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800713c:	b002      	add	sp, #8
 800713e:	4770      	bx	lr
 8007140:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007144:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007148:	bf14      	ite	ne
 800714a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800714e:	4623      	moveq	r3, r4
 8007150:	9304      	str	r3, [sp, #16]
 8007152:	9307      	str	r3, [sp, #28]
 8007154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007158:	9002      	str	r0, [sp, #8]
 800715a:	9006      	str	r0, [sp, #24]
 800715c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007162:	ab21      	add	r3, sp, #132	; 0x84
 8007164:	a902      	add	r1, sp, #8
 8007166:	4628      	mov	r0, r5
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f000 f8e9 	bl	8007340 <_svfiprintf_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	bfbc      	itt	lt
 8007172:	238b      	movlt	r3, #139	; 0x8b
 8007174:	602b      	strlt	r3, [r5, #0]
 8007176:	2c00      	cmp	r4, #0
 8007178:	d0dd      	beq.n	8007136 <sniprintf+0x16>
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	e7d9      	b.n	8007136 <sniprintf+0x16>
 8007182:	bf00      	nop
 8007184:	2000007c 	.word	0x2000007c

08007188 <siprintf>:
 8007188:	b40e      	push	{r1, r2, r3}
 800718a:	b500      	push	{lr}
 800718c:	b09c      	sub	sp, #112	; 0x70
 800718e:	ab1d      	add	r3, sp, #116	; 0x74
 8007190:	9002      	str	r0, [sp, #8]
 8007192:	9006      	str	r0, [sp, #24]
 8007194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007198:	4809      	ldr	r0, [pc, #36]	; (80071c0 <siprintf+0x38>)
 800719a:	9107      	str	r1, [sp, #28]
 800719c:	9104      	str	r1, [sp, #16]
 800719e:	4909      	ldr	r1, [pc, #36]	; (80071c4 <siprintf+0x3c>)
 80071a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a4:	9105      	str	r1, [sp, #20]
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	a902      	add	r1, sp, #8
 80071ac:	f000 f8c8 	bl	8007340 <_svfiprintf_r>
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	b01c      	add	sp, #112	; 0x70
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b003      	add	sp, #12
 80071be:	4770      	bx	lr
 80071c0:	2000007c 	.word	0x2000007c
 80071c4:	ffff0208 	.word	0xffff0208

080071c8 <strcpy>:
 80071c8:	4603      	mov	r3, r0
 80071ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ce:	f803 2b01 	strb.w	r2, [r3], #1
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	d1f9      	bne.n	80071ca <strcpy+0x2>
 80071d6:	4770      	bx	lr

080071d8 <__malloc_lock>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__malloc_lock+0x8>)
 80071da:	f7ff be7b 	b.w	8006ed4 <__retarget_lock_acquire_recursive>
 80071de:	bf00      	nop
 80071e0:	20003450 	.word	0x20003450

080071e4 <__malloc_unlock>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__malloc_unlock+0x8>)
 80071e6:	f7ff be76 	b.w	8006ed6 <__retarget_lock_release_recursive>
 80071ea:	bf00      	nop
 80071ec:	20003450 	.word	0x20003450

080071f0 <_free_r>:
 80071f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071f2:	2900      	cmp	r1, #0
 80071f4:	d044      	beq.n	8007280 <_free_r+0x90>
 80071f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fa:	9001      	str	r0, [sp, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007202:	bfb8      	it	lt
 8007204:	18e4      	addlt	r4, r4, r3
 8007206:	f7ff ffe7 	bl	80071d8 <__malloc_lock>
 800720a:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <_free_r+0x94>)
 800720c:	9801      	ldr	r0, [sp, #4]
 800720e:	6813      	ldr	r3, [r2, #0]
 8007210:	b933      	cbnz	r3, 8007220 <_free_r+0x30>
 8007212:	6063      	str	r3, [r4, #4]
 8007214:	6014      	str	r4, [r2, #0]
 8007216:	b003      	add	sp, #12
 8007218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721c:	f7ff bfe2 	b.w	80071e4 <__malloc_unlock>
 8007220:	42a3      	cmp	r3, r4
 8007222:	d908      	bls.n	8007236 <_free_r+0x46>
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	1961      	adds	r1, r4, r5
 8007228:	428b      	cmp	r3, r1
 800722a:	bf01      	itttt	eq
 800722c:	6819      	ldreq	r1, [r3, #0]
 800722e:	685b      	ldreq	r3, [r3, #4]
 8007230:	1949      	addeq	r1, r1, r5
 8007232:	6021      	streq	r1, [r4, #0]
 8007234:	e7ed      	b.n	8007212 <_free_r+0x22>
 8007236:	461a      	mov	r2, r3
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b10b      	cbz	r3, 8007240 <_free_r+0x50>
 800723c:	42a3      	cmp	r3, r4
 800723e:	d9fa      	bls.n	8007236 <_free_r+0x46>
 8007240:	6811      	ldr	r1, [r2, #0]
 8007242:	1855      	adds	r5, r2, r1
 8007244:	42a5      	cmp	r5, r4
 8007246:	d10b      	bne.n	8007260 <_free_r+0x70>
 8007248:	6824      	ldr	r4, [r4, #0]
 800724a:	4421      	add	r1, r4
 800724c:	1854      	adds	r4, r2, r1
 800724e:	42a3      	cmp	r3, r4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	d1e0      	bne.n	8007216 <_free_r+0x26>
 8007254:	681c      	ldr	r4, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	6053      	str	r3, [r2, #4]
 800725a:	4421      	add	r1, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	e7da      	b.n	8007216 <_free_r+0x26>
 8007260:	d902      	bls.n	8007268 <_free_r+0x78>
 8007262:	230c      	movs	r3, #12
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	e7d6      	b.n	8007216 <_free_r+0x26>
 8007268:	6825      	ldr	r5, [r4, #0]
 800726a:	1961      	adds	r1, r4, r5
 800726c:	428b      	cmp	r3, r1
 800726e:	bf04      	itt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	6063      	str	r3, [r4, #4]
 8007276:	bf04      	itt	eq
 8007278:	1949      	addeq	r1, r1, r5
 800727a:	6021      	streq	r1, [r4, #0]
 800727c:	6054      	str	r4, [r2, #4]
 800727e:	e7ca      	b.n	8007216 <_free_r+0x26>
 8007280:	b003      	add	sp, #12
 8007282:	bd30      	pop	{r4, r5, pc}
 8007284:	20003454 	.word	0x20003454

08007288 <__ssputs_r>:
 8007288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	688e      	ldr	r6, [r1, #8]
 800728e:	429e      	cmp	r6, r3
 8007290:	4682      	mov	sl, r0
 8007292:	460c      	mov	r4, r1
 8007294:	4690      	mov	r8, r2
 8007296:	461f      	mov	r7, r3
 8007298:	d838      	bhi.n	800730c <__ssputs_r+0x84>
 800729a:	898a      	ldrh	r2, [r1, #12]
 800729c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072a0:	d032      	beq.n	8007308 <__ssputs_r+0x80>
 80072a2:	6825      	ldr	r5, [r4, #0]
 80072a4:	6909      	ldr	r1, [r1, #16]
 80072a6:	eba5 0901 	sub.w	r9, r5, r1
 80072aa:	6965      	ldr	r5, [r4, #20]
 80072ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072b4:	3301      	adds	r3, #1
 80072b6:	444b      	add	r3, r9
 80072b8:	106d      	asrs	r5, r5, #1
 80072ba:	429d      	cmp	r5, r3
 80072bc:	bf38      	it	cc
 80072be:	461d      	movcc	r5, r3
 80072c0:	0553      	lsls	r3, r2, #21
 80072c2:	d531      	bpl.n	8007328 <__ssputs_r+0xa0>
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7ff fe3d 	bl	8006f44 <_malloc_r>
 80072ca:	4606      	mov	r6, r0
 80072cc:	b950      	cbnz	r0, 80072e4 <__ssputs_r+0x5c>
 80072ce:	230c      	movs	r3, #12
 80072d0:	f8ca 3000 	str.w	r3, [sl]
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072da:	81a3      	strh	r3, [r4, #12]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e4:	6921      	ldr	r1, [r4, #16]
 80072e6:	464a      	mov	r2, r9
 80072e8:	f7ff fdf6 	bl	8006ed8 <memcpy>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f6:	81a3      	strh	r3, [r4, #12]
 80072f8:	6126      	str	r6, [r4, #16]
 80072fa:	6165      	str	r5, [r4, #20]
 80072fc:	444e      	add	r6, r9
 80072fe:	eba5 0509 	sub.w	r5, r5, r9
 8007302:	6026      	str	r6, [r4, #0]
 8007304:	60a5      	str	r5, [r4, #8]
 8007306:	463e      	mov	r6, r7
 8007308:	42be      	cmp	r6, r7
 800730a:	d900      	bls.n	800730e <__ssputs_r+0x86>
 800730c:	463e      	mov	r6, r7
 800730e:	6820      	ldr	r0, [r4, #0]
 8007310:	4632      	mov	r2, r6
 8007312:	4641      	mov	r1, r8
 8007314:	f000 faa8 	bl	8007868 <memmove>
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	1b9b      	subs	r3, r3, r6
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	4433      	add	r3, r6
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	2000      	movs	r0, #0
 8007326:	e7db      	b.n	80072e0 <__ssputs_r+0x58>
 8007328:	462a      	mov	r2, r5
 800732a:	f000 fab7 	bl	800789c <_realloc_r>
 800732e:	4606      	mov	r6, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	d1e1      	bne.n	80072f8 <__ssputs_r+0x70>
 8007334:	6921      	ldr	r1, [r4, #16]
 8007336:	4650      	mov	r0, sl
 8007338:	f7ff ff5a 	bl	80071f0 <_free_r>
 800733c:	e7c7      	b.n	80072ce <__ssputs_r+0x46>
	...

08007340 <_svfiprintf_r>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	4698      	mov	r8, r3
 8007346:	898b      	ldrh	r3, [r1, #12]
 8007348:	061b      	lsls	r3, r3, #24
 800734a:	b09d      	sub	sp, #116	; 0x74
 800734c:	4607      	mov	r7, r0
 800734e:	460d      	mov	r5, r1
 8007350:	4614      	mov	r4, r2
 8007352:	d50e      	bpl.n	8007372 <_svfiprintf_r+0x32>
 8007354:	690b      	ldr	r3, [r1, #16]
 8007356:	b963      	cbnz	r3, 8007372 <_svfiprintf_r+0x32>
 8007358:	2140      	movs	r1, #64	; 0x40
 800735a:	f7ff fdf3 	bl	8006f44 <_malloc_r>
 800735e:	6028      	str	r0, [r5, #0]
 8007360:	6128      	str	r0, [r5, #16]
 8007362:	b920      	cbnz	r0, 800736e <_svfiprintf_r+0x2e>
 8007364:	230c      	movs	r3, #12
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	e0d1      	b.n	8007512 <_svfiprintf_r+0x1d2>
 800736e:	2340      	movs	r3, #64	; 0x40
 8007370:	616b      	str	r3, [r5, #20]
 8007372:	2300      	movs	r3, #0
 8007374:	9309      	str	r3, [sp, #36]	; 0x24
 8007376:	2320      	movs	r3, #32
 8007378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800737c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007380:	2330      	movs	r3, #48	; 0x30
 8007382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800752c <_svfiprintf_r+0x1ec>
 8007386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800738a:	f04f 0901 	mov.w	r9, #1
 800738e:	4623      	mov	r3, r4
 8007390:	469a      	mov	sl, r3
 8007392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007396:	b10a      	cbz	r2, 800739c <_svfiprintf_r+0x5c>
 8007398:	2a25      	cmp	r2, #37	; 0x25
 800739a:	d1f9      	bne.n	8007390 <_svfiprintf_r+0x50>
 800739c:	ebba 0b04 	subs.w	fp, sl, r4
 80073a0:	d00b      	beq.n	80073ba <_svfiprintf_r+0x7a>
 80073a2:	465b      	mov	r3, fp
 80073a4:	4622      	mov	r2, r4
 80073a6:	4629      	mov	r1, r5
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff ff6d 	bl	8007288 <__ssputs_r>
 80073ae:	3001      	adds	r0, #1
 80073b0:	f000 80aa 	beq.w	8007508 <_svfiprintf_r+0x1c8>
 80073b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073b6:	445a      	add	r2, fp
 80073b8:	9209      	str	r2, [sp, #36]	; 0x24
 80073ba:	f89a 3000 	ldrb.w	r3, [sl]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80a2 	beq.w	8007508 <_svfiprintf_r+0x1c8>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ce:	f10a 0a01 	add.w	sl, sl, #1
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073da:	931a      	str	r3, [sp, #104]	; 0x68
 80073dc:	4654      	mov	r4, sl
 80073de:	2205      	movs	r2, #5
 80073e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e4:	4851      	ldr	r0, [pc, #324]	; (800752c <_svfiprintf_r+0x1ec>)
 80073e6:	f7f8 ff23 	bl	8000230 <memchr>
 80073ea:	9a04      	ldr	r2, [sp, #16]
 80073ec:	b9d8      	cbnz	r0, 8007426 <_svfiprintf_r+0xe6>
 80073ee:	06d0      	lsls	r0, r2, #27
 80073f0:	bf44      	itt	mi
 80073f2:	2320      	movmi	r3, #32
 80073f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073f8:	0711      	lsls	r1, r2, #28
 80073fa:	bf44      	itt	mi
 80073fc:	232b      	movmi	r3, #43	; 0x2b
 80073fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007402:	f89a 3000 	ldrb.w	r3, [sl]
 8007406:	2b2a      	cmp	r3, #42	; 0x2a
 8007408:	d015      	beq.n	8007436 <_svfiprintf_r+0xf6>
 800740a:	9a07      	ldr	r2, [sp, #28]
 800740c:	4654      	mov	r4, sl
 800740e:	2000      	movs	r0, #0
 8007410:	f04f 0c0a 	mov.w	ip, #10
 8007414:	4621      	mov	r1, r4
 8007416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800741a:	3b30      	subs	r3, #48	; 0x30
 800741c:	2b09      	cmp	r3, #9
 800741e:	d94e      	bls.n	80074be <_svfiprintf_r+0x17e>
 8007420:	b1b0      	cbz	r0, 8007450 <_svfiprintf_r+0x110>
 8007422:	9207      	str	r2, [sp, #28]
 8007424:	e014      	b.n	8007450 <_svfiprintf_r+0x110>
 8007426:	eba0 0308 	sub.w	r3, r0, r8
 800742a:	fa09 f303 	lsl.w	r3, r9, r3
 800742e:	4313      	orrs	r3, r2
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	46a2      	mov	sl, r4
 8007434:	e7d2      	b.n	80073dc <_svfiprintf_r+0x9c>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	1d19      	adds	r1, r3, #4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	9103      	str	r1, [sp, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	bfbb      	ittet	lt
 8007442:	425b      	neglt	r3, r3
 8007444:	f042 0202 	orrlt.w	r2, r2, #2
 8007448:	9307      	strge	r3, [sp, #28]
 800744a:	9307      	strlt	r3, [sp, #28]
 800744c:	bfb8      	it	lt
 800744e:	9204      	strlt	r2, [sp, #16]
 8007450:	7823      	ldrb	r3, [r4, #0]
 8007452:	2b2e      	cmp	r3, #46	; 0x2e
 8007454:	d10c      	bne.n	8007470 <_svfiprintf_r+0x130>
 8007456:	7863      	ldrb	r3, [r4, #1]
 8007458:	2b2a      	cmp	r3, #42	; 0x2a
 800745a:	d135      	bne.n	80074c8 <_svfiprintf_r+0x188>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	9203      	str	r2, [sp, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfb8      	it	lt
 8007468:	f04f 33ff 	movlt.w	r3, #4294967295
 800746c:	3402      	adds	r4, #2
 800746e:	9305      	str	r3, [sp, #20]
 8007470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800753c <_svfiprintf_r+0x1fc>
 8007474:	7821      	ldrb	r1, [r4, #0]
 8007476:	2203      	movs	r2, #3
 8007478:	4650      	mov	r0, sl
 800747a:	f7f8 fed9 	bl	8000230 <memchr>
 800747e:	b140      	cbz	r0, 8007492 <_svfiprintf_r+0x152>
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	eba0 000a 	sub.w	r0, r0, sl
 8007486:	fa03 f000 	lsl.w	r0, r3, r0
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	4303      	orrs	r3, r0
 800748e:	3401      	adds	r4, #1
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007496:	4826      	ldr	r0, [pc, #152]	; (8007530 <_svfiprintf_r+0x1f0>)
 8007498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800749c:	2206      	movs	r2, #6
 800749e:	f7f8 fec7 	bl	8000230 <memchr>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d038      	beq.n	8007518 <_svfiprintf_r+0x1d8>
 80074a6:	4b23      	ldr	r3, [pc, #140]	; (8007534 <_svfiprintf_r+0x1f4>)
 80074a8:	bb1b      	cbnz	r3, 80074f2 <_svfiprintf_r+0x1b2>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	3307      	adds	r3, #7
 80074ae:	f023 0307 	bic.w	r3, r3, #7
 80074b2:	3308      	adds	r3, #8
 80074b4:	9303      	str	r3, [sp, #12]
 80074b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b8:	4433      	add	r3, r6
 80074ba:	9309      	str	r3, [sp, #36]	; 0x24
 80074bc:	e767      	b.n	800738e <_svfiprintf_r+0x4e>
 80074be:	fb0c 3202 	mla	r2, ip, r2, r3
 80074c2:	460c      	mov	r4, r1
 80074c4:	2001      	movs	r0, #1
 80074c6:	e7a5      	b.n	8007414 <_svfiprintf_r+0xd4>
 80074c8:	2300      	movs	r3, #0
 80074ca:	3401      	adds	r4, #1
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	4619      	mov	r1, r3
 80074d0:	f04f 0c0a 	mov.w	ip, #10
 80074d4:	4620      	mov	r0, r4
 80074d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074da:	3a30      	subs	r2, #48	; 0x30
 80074dc:	2a09      	cmp	r2, #9
 80074de:	d903      	bls.n	80074e8 <_svfiprintf_r+0x1a8>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0c5      	beq.n	8007470 <_svfiprintf_r+0x130>
 80074e4:	9105      	str	r1, [sp, #20]
 80074e6:	e7c3      	b.n	8007470 <_svfiprintf_r+0x130>
 80074e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ec:	4604      	mov	r4, r0
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7f0      	b.n	80074d4 <_svfiprintf_r+0x194>
 80074f2:	ab03      	add	r3, sp, #12
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	462a      	mov	r2, r5
 80074f8:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <_svfiprintf_r+0x1f8>)
 80074fa:	a904      	add	r1, sp, #16
 80074fc:	4638      	mov	r0, r7
 80074fe:	f3af 8000 	nop.w
 8007502:	1c42      	adds	r2, r0, #1
 8007504:	4606      	mov	r6, r0
 8007506:	d1d6      	bne.n	80074b6 <_svfiprintf_r+0x176>
 8007508:	89ab      	ldrh	r3, [r5, #12]
 800750a:	065b      	lsls	r3, r3, #25
 800750c:	f53f af2c 	bmi.w	8007368 <_svfiprintf_r+0x28>
 8007510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007512:	b01d      	add	sp, #116	; 0x74
 8007514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007518:	ab03      	add	r3, sp, #12
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	462a      	mov	r2, r5
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <_svfiprintf_r+0x1f8>)
 8007520:	a904      	add	r1, sp, #16
 8007522:	4638      	mov	r0, r7
 8007524:	f000 f87a 	bl	800761c <_printf_i>
 8007528:	e7eb      	b.n	8007502 <_svfiprintf_r+0x1c2>
 800752a:	bf00      	nop
 800752c:	08007af0 	.word	0x08007af0
 8007530:	08007afa 	.word	0x08007afa
 8007534:	00000000 	.word	0x00000000
 8007538:	08007289 	.word	0x08007289
 800753c:	08007af6 	.word	0x08007af6

08007540 <_printf_common>:
 8007540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	4616      	mov	r6, r2
 8007546:	4699      	mov	r9, r3
 8007548:	688a      	ldr	r2, [r1, #8]
 800754a:	690b      	ldr	r3, [r1, #16]
 800754c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007550:	4293      	cmp	r3, r2
 8007552:	bfb8      	it	lt
 8007554:	4613      	movlt	r3, r2
 8007556:	6033      	str	r3, [r6, #0]
 8007558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800755c:	4607      	mov	r7, r0
 800755e:	460c      	mov	r4, r1
 8007560:	b10a      	cbz	r2, 8007566 <_printf_common+0x26>
 8007562:	3301      	adds	r3, #1
 8007564:	6033      	str	r3, [r6, #0]
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	0699      	lsls	r1, r3, #26
 800756a:	bf42      	ittt	mi
 800756c:	6833      	ldrmi	r3, [r6, #0]
 800756e:	3302      	addmi	r3, #2
 8007570:	6033      	strmi	r3, [r6, #0]
 8007572:	6825      	ldr	r5, [r4, #0]
 8007574:	f015 0506 	ands.w	r5, r5, #6
 8007578:	d106      	bne.n	8007588 <_printf_common+0x48>
 800757a:	f104 0a19 	add.w	sl, r4, #25
 800757e:	68e3      	ldr	r3, [r4, #12]
 8007580:	6832      	ldr	r2, [r6, #0]
 8007582:	1a9b      	subs	r3, r3, r2
 8007584:	42ab      	cmp	r3, r5
 8007586:	dc26      	bgt.n	80075d6 <_printf_common+0x96>
 8007588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800758c:	1e13      	subs	r3, r2, #0
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	bf18      	it	ne
 8007592:	2301      	movne	r3, #1
 8007594:	0692      	lsls	r2, r2, #26
 8007596:	d42b      	bmi.n	80075f0 <_printf_common+0xb0>
 8007598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800759c:	4649      	mov	r1, r9
 800759e:	4638      	mov	r0, r7
 80075a0:	47c0      	blx	r8
 80075a2:	3001      	adds	r0, #1
 80075a4:	d01e      	beq.n	80075e4 <_printf_common+0xa4>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	68e5      	ldr	r5, [r4, #12]
 80075aa:	6832      	ldr	r2, [r6, #0]
 80075ac:	f003 0306 	and.w	r3, r3, #6
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	bf08      	it	eq
 80075b4:	1aad      	subeq	r5, r5, r2
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	6922      	ldr	r2, [r4, #16]
 80075ba:	bf0c      	ite	eq
 80075bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c0:	2500      	movne	r5, #0
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bfc4      	itt	gt
 80075c6:	1a9b      	subgt	r3, r3, r2
 80075c8:	18ed      	addgt	r5, r5, r3
 80075ca:	2600      	movs	r6, #0
 80075cc:	341a      	adds	r4, #26
 80075ce:	42b5      	cmp	r5, r6
 80075d0:	d11a      	bne.n	8007608 <_printf_common+0xc8>
 80075d2:	2000      	movs	r0, #0
 80075d4:	e008      	b.n	80075e8 <_printf_common+0xa8>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4652      	mov	r2, sl
 80075da:	4649      	mov	r1, r9
 80075dc:	4638      	mov	r0, r7
 80075de:	47c0      	blx	r8
 80075e0:	3001      	adds	r0, #1
 80075e2:	d103      	bne.n	80075ec <_printf_common+0xac>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ec:	3501      	adds	r5, #1
 80075ee:	e7c6      	b.n	800757e <_printf_common+0x3e>
 80075f0:	18e1      	adds	r1, r4, r3
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	2030      	movs	r0, #48	; 0x30
 80075f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075fa:	4422      	add	r2, r4
 80075fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007604:	3302      	adds	r3, #2
 8007606:	e7c7      	b.n	8007598 <_printf_common+0x58>
 8007608:	2301      	movs	r3, #1
 800760a:	4622      	mov	r2, r4
 800760c:	4649      	mov	r1, r9
 800760e:	4638      	mov	r0, r7
 8007610:	47c0      	blx	r8
 8007612:	3001      	adds	r0, #1
 8007614:	d0e6      	beq.n	80075e4 <_printf_common+0xa4>
 8007616:	3601      	adds	r6, #1
 8007618:	e7d9      	b.n	80075ce <_printf_common+0x8e>
	...

0800761c <_printf_i>:
 800761c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	7e0f      	ldrb	r7, [r1, #24]
 8007622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007624:	2f78      	cmp	r7, #120	; 0x78
 8007626:	4691      	mov	r9, r2
 8007628:	4680      	mov	r8, r0
 800762a:	460c      	mov	r4, r1
 800762c:	469a      	mov	sl, r3
 800762e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007632:	d807      	bhi.n	8007644 <_printf_i+0x28>
 8007634:	2f62      	cmp	r7, #98	; 0x62
 8007636:	d80a      	bhi.n	800764e <_printf_i+0x32>
 8007638:	2f00      	cmp	r7, #0
 800763a:	f000 80d8 	beq.w	80077ee <_printf_i+0x1d2>
 800763e:	2f58      	cmp	r7, #88	; 0x58
 8007640:	f000 80a3 	beq.w	800778a <_printf_i+0x16e>
 8007644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800764c:	e03a      	b.n	80076c4 <_printf_i+0xa8>
 800764e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007652:	2b15      	cmp	r3, #21
 8007654:	d8f6      	bhi.n	8007644 <_printf_i+0x28>
 8007656:	a101      	add	r1, pc, #4	; (adr r1, 800765c <_printf_i+0x40>)
 8007658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800765c:	080076b5 	.word	0x080076b5
 8007660:	080076c9 	.word	0x080076c9
 8007664:	08007645 	.word	0x08007645
 8007668:	08007645 	.word	0x08007645
 800766c:	08007645 	.word	0x08007645
 8007670:	08007645 	.word	0x08007645
 8007674:	080076c9 	.word	0x080076c9
 8007678:	08007645 	.word	0x08007645
 800767c:	08007645 	.word	0x08007645
 8007680:	08007645 	.word	0x08007645
 8007684:	08007645 	.word	0x08007645
 8007688:	080077d5 	.word	0x080077d5
 800768c:	080076f9 	.word	0x080076f9
 8007690:	080077b7 	.word	0x080077b7
 8007694:	08007645 	.word	0x08007645
 8007698:	08007645 	.word	0x08007645
 800769c:	080077f7 	.word	0x080077f7
 80076a0:	08007645 	.word	0x08007645
 80076a4:	080076f9 	.word	0x080076f9
 80076a8:	08007645 	.word	0x08007645
 80076ac:	08007645 	.word	0x08007645
 80076b0:	080077bf 	.word	0x080077bf
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	1d1a      	adds	r2, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	602a      	str	r2, [r5, #0]
 80076bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0a3      	b.n	8007810 <_printf_i+0x1f4>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	6829      	ldr	r1, [r5, #0]
 80076cc:	0606      	lsls	r6, r0, #24
 80076ce:	f101 0304 	add.w	r3, r1, #4
 80076d2:	d50a      	bpl.n	80076ea <_printf_i+0xce>
 80076d4:	680e      	ldr	r6, [r1, #0]
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	2e00      	cmp	r6, #0
 80076da:	da03      	bge.n	80076e4 <_printf_i+0xc8>
 80076dc:	232d      	movs	r3, #45	; 0x2d
 80076de:	4276      	negs	r6, r6
 80076e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e4:	485e      	ldr	r0, [pc, #376]	; (8007860 <_printf_i+0x244>)
 80076e6:	230a      	movs	r3, #10
 80076e8:	e019      	b.n	800771e <_printf_i+0x102>
 80076ea:	680e      	ldr	r6, [r1, #0]
 80076ec:	602b      	str	r3, [r5, #0]
 80076ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076f2:	bf18      	it	ne
 80076f4:	b236      	sxthne	r6, r6
 80076f6:	e7ef      	b.n	80076d8 <_printf_i+0xbc>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	6820      	ldr	r0, [r4, #0]
 80076fc:	1d19      	adds	r1, r3, #4
 80076fe:	6029      	str	r1, [r5, #0]
 8007700:	0601      	lsls	r1, r0, #24
 8007702:	d501      	bpl.n	8007708 <_printf_i+0xec>
 8007704:	681e      	ldr	r6, [r3, #0]
 8007706:	e002      	b.n	800770e <_printf_i+0xf2>
 8007708:	0646      	lsls	r6, r0, #25
 800770a:	d5fb      	bpl.n	8007704 <_printf_i+0xe8>
 800770c:	881e      	ldrh	r6, [r3, #0]
 800770e:	4854      	ldr	r0, [pc, #336]	; (8007860 <_printf_i+0x244>)
 8007710:	2f6f      	cmp	r7, #111	; 0x6f
 8007712:	bf0c      	ite	eq
 8007714:	2308      	moveq	r3, #8
 8007716:	230a      	movne	r3, #10
 8007718:	2100      	movs	r1, #0
 800771a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800771e:	6865      	ldr	r5, [r4, #4]
 8007720:	60a5      	str	r5, [r4, #8]
 8007722:	2d00      	cmp	r5, #0
 8007724:	bfa2      	ittt	ge
 8007726:	6821      	ldrge	r1, [r4, #0]
 8007728:	f021 0104 	bicge.w	r1, r1, #4
 800772c:	6021      	strge	r1, [r4, #0]
 800772e:	b90e      	cbnz	r6, 8007734 <_printf_i+0x118>
 8007730:	2d00      	cmp	r5, #0
 8007732:	d04d      	beq.n	80077d0 <_printf_i+0x1b4>
 8007734:	4615      	mov	r5, r2
 8007736:	fbb6 f1f3 	udiv	r1, r6, r3
 800773a:	fb03 6711 	mls	r7, r3, r1, r6
 800773e:	5dc7      	ldrb	r7, [r0, r7]
 8007740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007744:	4637      	mov	r7, r6
 8007746:	42bb      	cmp	r3, r7
 8007748:	460e      	mov	r6, r1
 800774a:	d9f4      	bls.n	8007736 <_printf_i+0x11a>
 800774c:	2b08      	cmp	r3, #8
 800774e:	d10b      	bne.n	8007768 <_printf_i+0x14c>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	07de      	lsls	r6, r3, #31
 8007754:	d508      	bpl.n	8007768 <_printf_i+0x14c>
 8007756:	6923      	ldr	r3, [r4, #16]
 8007758:	6861      	ldr	r1, [r4, #4]
 800775a:	4299      	cmp	r1, r3
 800775c:	bfde      	ittt	le
 800775e:	2330      	movle	r3, #48	; 0x30
 8007760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007768:	1b52      	subs	r2, r2, r5
 800776a:	6122      	str	r2, [r4, #16]
 800776c:	f8cd a000 	str.w	sl, [sp]
 8007770:	464b      	mov	r3, r9
 8007772:	aa03      	add	r2, sp, #12
 8007774:	4621      	mov	r1, r4
 8007776:	4640      	mov	r0, r8
 8007778:	f7ff fee2 	bl	8007540 <_printf_common>
 800777c:	3001      	adds	r0, #1
 800777e:	d14c      	bne.n	800781a <_printf_i+0x1fe>
 8007780:	f04f 30ff 	mov.w	r0, #4294967295
 8007784:	b004      	add	sp, #16
 8007786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778a:	4835      	ldr	r0, [pc, #212]	; (8007860 <_printf_i+0x244>)
 800778c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007790:	6829      	ldr	r1, [r5, #0]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	f851 6b04 	ldr.w	r6, [r1], #4
 8007798:	6029      	str	r1, [r5, #0]
 800779a:	061d      	lsls	r5, r3, #24
 800779c:	d514      	bpl.n	80077c8 <_printf_i+0x1ac>
 800779e:	07df      	lsls	r7, r3, #31
 80077a0:	bf44      	itt	mi
 80077a2:	f043 0320 	orrmi.w	r3, r3, #32
 80077a6:	6023      	strmi	r3, [r4, #0]
 80077a8:	b91e      	cbnz	r6, 80077b2 <_printf_i+0x196>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	f023 0320 	bic.w	r3, r3, #32
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	2310      	movs	r3, #16
 80077b4:	e7b0      	b.n	8007718 <_printf_i+0xfc>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	f043 0320 	orr.w	r3, r3, #32
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	2378      	movs	r3, #120	; 0x78
 80077c0:	4828      	ldr	r0, [pc, #160]	; (8007864 <_printf_i+0x248>)
 80077c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077c6:	e7e3      	b.n	8007790 <_printf_i+0x174>
 80077c8:	0659      	lsls	r1, r3, #25
 80077ca:	bf48      	it	mi
 80077cc:	b2b6      	uxthmi	r6, r6
 80077ce:	e7e6      	b.n	800779e <_printf_i+0x182>
 80077d0:	4615      	mov	r5, r2
 80077d2:	e7bb      	b.n	800774c <_printf_i+0x130>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	6826      	ldr	r6, [r4, #0]
 80077d8:	6961      	ldr	r1, [r4, #20]
 80077da:	1d18      	adds	r0, r3, #4
 80077dc:	6028      	str	r0, [r5, #0]
 80077de:	0635      	lsls	r5, r6, #24
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	d501      	bpl.n	80077e8 <_printf_i+0x1cc>
 80077e4:	6019      	str	r1, [r3, #0]
 80077e6:	e002      	b.n	80077ee <_printf_i+0x1d2>
 80077e8:	0670      	lsls	r0, r6, #25
 80077ea:	d5fb      	bpl.n	80077e4 <_printf_i+0x1c8>
 80077ec:	8019      	strh	r1, [r3, #0]
 80077ee:	2300      	movs	r3, #0
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	4615      	mov	r5, r2
 80077f4:	e7ba      	b.n	800776c <_printf_i+0x150>
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	1d1a      	adds	r2, r3, #4
 80077fa:	602a      	str	r2, [r5, #0]
 80077fc:	681d      	ldr	r5, [r3, #0]
 80077fe:	6862      	ldr	r2, [r4, #4]
 8007800:	2100      	movs	r1, #0
 8007802:	4628      	mov	r0, r5
 8007804:	f7f8 fd14 	bl	8000230 <memchr>
 8007808:	b108      	cbz	r0, 800780e <_printf_i+0x1f2>
 800780a:	1b40      	subs	r0, r0, r5
 800780c:	6060      	str	r0, [r4, #4]
 800780e:	6863      	ldr	r3, [r4, #4]
 8007810:	6123      	str	r3, [r4, #16]
 8007812:	2300      	movs	r3, #0
 8007814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007818:	e7a8      	b.n	800776c <_printf_i+0x150>
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	462a      	mov	r2, r5
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	47d0      	blx	sl
 8007824:	3001      	adds	r0, #1
 8007826:	d0ab      	beq.n	8007780 <_printf_i+0x164>
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	079b      	lsls	r3, r3, #30
 800782c:	d413      	bmi.n	8007856 <_printf_i+0x23a>
 800782e:	68e0      	ldr	r0, [r4, #12]
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	4298      	cmp	r0, r3
 8007834:	bfb8      	it	lt
 8007836:	4618      	movlt	r0, r3
 8007838:	e7a4      	b.n	8007784 <_printf_i+0x168>
 800783a:	2301      	movs	r3, #1
 800783c:	4632      	mov	r2, r6
 800783e:	4649      	mov	r1, r9
 8007840:	4640      	mov	r0, r8
 8007842:	47d0      	blx	sl
 8007844:	3001      	adds	r0, #1
 8007846:	d09b      	beq.n	8007780 <_printf_i+0x164>
 8007848:	3501      	adds	r5, #1
 800784a:	68e3      	ldr	r3, [r4, #12]
 800784c:	9903      	ldr	r1, [sp, #12]
 800784e:	1a5b      	subs	r3, r3, r1
 8007850:	42ab      	cmp	r3, r5
 8007852:	dcf2      	bgt.n	800783a <_printf_i+0x21e>
 8007854:	e7eb      	b.n	800782e <_printf_i+0x212>
 8007856:	2500      	movs	r5, #0
 8007858:	f104 0619 	add.w	r6, r4, #25
 800785c:	e7f5      	b.n	800784a <_printf_i+0x22e>
 800785e:	bf00      	nop
 8007860:	08007b01 	.word	0x08007b01
 8007864:	08007b12 	.word	0x08007b12

08007868 <memmove>:
 8007868:	4288      	cmp	r0, r1
 800786a:	b510      	push	{r4, lr}
 800786c:	eb01 0402 	add.w	r4, r1, r2
 8007870:	d902      	bls.n	8007878 <memmove+0x10>
 8007872:	4284      	cmp	r4, r0
 8007874:	4623      	mov	r3, r4
 8007876:	d807      	bhi.n	8007888 <memmove+0x20>
 8007878:	1e43      	subs	r3, r0, #1
 800787a:	42a1      	cmp	r1, r4
 800787c:	d008      	beq.n	8007890 <memmove+0x28>
 800787e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007886:	e7f8      	b.n	800787a <memmove+0x12>
 8007888:	4402      	add	r2, r0
 800788a:	4601      	mov	r1, r0
 800788c:	428a      	cmp	r2, r1
 800788e:	d100      	bne.n	8007892 <memmove+0x2a>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789a:	e7f7      	b.n	800788c <memmove+0x24>

0800789c <_realloc_r>:
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	4680      	mov	r8, r0
 80078a2:	4614      	mov	r4, r2
 80078a4:	460e      	mov	r6, r1
 80078a6:	b921      	cbnz	r1, 80078b2 <_realloc_r+0x16>
 80078a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	4611      	mov	r1, r2
 80078ae:	f7ff bb49 	b.w	8006f44 <_malloc_r>
 80078b2:	b92a      	cbnz	r2, 80078c0 <_realloc_r+0x24>
 80078b4:	f7ff fc9c 	bl	80071f0 <_free_r>
 80078b8:	4625      	mov	r5, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	f000 f81b 	bl	80078fa <_malloc_usable_size_r>
 80078c4:	4284      	cmp	r4, r0
 80078c6:	4607      	mov	r7, r0
 80078c8:	d802      	bhi.n	80078d0 <_realloc_r+0x34>
 80078ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ce:	d812      	bhi.n	80078f6 <_realloc_r+0x5a>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4640      	mov	r0, r8
 80078d4:	f7ff fb36 	bl	8006f44 <_malloc_r>
 80078d8:	4605      	mov	r5, r0
 80078da:	2800      	cmp	r0, #0
 80078dc:	d0ed      	beq.n	80078ba <_realloc_r+0x1e>
 80078de:	42bc      	cmp	r4, r7
 80078e0:	4622      	mov	r2, r4
 80078e2:	4631      	mov	r1, r6
 80078e4:	bf28      	it	cs
 80078e6:	463a      	movcs	r2, r7
 80078e8:	f7ff faf6 	bl	8006ed8 <memcpy>
 80078ec:	4631      	mov	r1, r6
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fc7e 	bl	80071f0 <_free_r>
 80078f4:	e7e1      	b.n	80078ba <_realloc_r+0x1e>
 80078f6:	4635      	mov	r5, r6
 80078f8:	e7df      	b.n	80078ba <_realloc_r+0x1e>

080078fa <_malloc_usable_size_r>:
 80078fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fe:	1f18      	subs	r0, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfbc      	itt	lt
 8007904:	580b      	ldrlt	r3, [r1, r0]
 8007906:	18c0      	addlt	r0, r0, r3
 8007908:	4770      	bx	lr
	...

0800790c <_init>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr

08007918 <_fini>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr
